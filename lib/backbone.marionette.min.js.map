{"version":3,"sources":["src/common/trigger-method.js","src/common/monitor-view-events.js","src/common/bind-events.js","src/common/bind-requests.js","src/mixins/behaviors.js","src/utils/get-unique-event-name.js","src/config/features.js","src/mixins/triggers.js","src/utils/destroy-backbone-view.js","src/common/build-region.js","src/config/behaviors-lookup.js","src/utils/proxy.js","src/utils/extend.js","src/utils/deprecate.js","src/common/is-node-attached.js","src/common/merge-options.js","src/common/get-option.js","src/common/normalize-methods.js","src/error.js","src/utils/set-options.js","src/mixins/common.js","src/mixins/radio.js","src/object.js","src/mixins/dom.js","src/template-cache.js","src/utils/invoke.js","src/mixins/delegate-entity-events.js","src/mixins/ui.js","src/mixins/view.js","src/region.js","src/mixins/regions.js","src/config/renderer.js","src/view.js","src/utils/emulate-collection.js","src/child-view-container.js","src/collection-view.js","src/composite-view.js","src/behavior.js","src/application.js","src/app-router.js","src/backbone.marionette.js"],"names":["getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","args","Array","_len","_key","arguments","methodName","getOnMethodName","method","getOption","call","this","result","_","isFunction","apply","trigger","triggerMethodOn","context","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","triggerDOMRefresh","_isRendered","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleRender","monitorViewEvents","_areViewEventsMonitored","on","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","isString","bindEvents","unbindEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRequests","unbindRequests","getBehaviorClass","options","key","behaviorClass","Marionette","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","concat","flatten","value","uniqueName","selector","uniqueId","join","isEnabled","name","FEATURES","setEnabled","state","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","destroyBackboneView","supportsDestroyLifecycle","remove","_isDestroyed","buildRegionFromDefinition","definition","defaults","opts","extend","el","buildRegionFromObject","regionClass","RegionClass","omit","proxy","Backbone","Model","deprecate","message","test","prev","next","url","DEV_MODE","undefined","_cache","_warn","_console","console","warn","log","noop","isNodeAttached","document","documentElement","contains","parentNode","mergeOptions","keys","option","optionName","hash","reduce","normalizedHash","_this","splitter","memoize","replace","errorProps","Error","version","error","pick","captureStackTrace","urlRoot","setOptions","CommonMixin","_setOptions","RadioMixin","channelName","Radio","_channel","radioEvents","radioRequests","_destroyRadio","stopReplying","ClassOptions","MarionetteObject","cid","cidPrefix","_initRadio","initialize","prototype","Events","stopListening","DomMixin","createDocumentFragment","children","$","append","sibling","before","newEl","oldEl","parent","replaceChild","contents","detach","html","TemplateCache","templateId","cachedTemplate","templateCaches","load","i","length","compiledTemplate","template","loadTemplate","compileTemplate","$template","findEls","rawTemplate","_invoke","invokeMap","invoke","BehaviorsMixin","_behaviors","_getBehaviors","triggers","_toConsumableArray","events","DelegateEntityEventsMixin","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","normalizeUIValues","properties","isArray","property","propertyVal","UIMixin","uiBindings","_getUIBindings","_uiBindings","_ui","$el","_this2","ViewMixin","eventsArg","_proxyBehaviorViewProperties","_buildEventProxies","viewEvents","_getEvents","combinedEvents","_getBehaviorEvents","_getBehaviorTriggers","getTriggers","View","delegateEvents","_getViewTriggers","_delegateEntityEvents","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","unbindUIElements","removeEl","_removeChildren","_destroyBehaviors","_bindUIElements","_bindBehaviorUIElements","_unbindUIElements","_unbindBehaviorUIElements","_getUI","ret","_triggerEventOnBehaviors","_childViewEvents","_childViewTriggers","listenTo","_childViewEventHandler","childViewEvents","childViewTriggers","childEventName","Region","_initEl","getEl","_ensureElement","_getView","currentView","_isSwappingView","empty","_setupChildView","_renderView","_attachView","_proxyChildViewEvents","_empty","parentView","_parentView","supportsRenderLifecycle","render","shouldReplaceEl","replaceElement","_replaceEl","attachHtml","allowMissingEl","viewOptions","_getViewOptions","_restoreEl","replaceEl","_isReplaced","appendChildren","detachHtml","shouldDestroy","preventDestroy","off","removeView","_detachView","_stopChildViewEvents","destroy","destroyView","detachContents","reset","buildRegion","RegionsMixin","regions","_regions","addRegions","isEmpty","_addRegions","regionDefinitions","partial","_addRegion","region","_removeRegion","getRegions","bind","getRegion","clone","show","detachView","Renderer","data","templateFunc","get","_initBehaviors","_initRegions","constructor","delegateEntityEvents","serializeModel","serializeCollection","attributes","hasEl","setElement","bindUIElements","_reInitRegions","_renderTemplate","getTemplate","mixinTemplateContext","serializeData","attachElContent","templateContext","setInnerContent","removeRegions","compact","emulateCollection","object","listProperty","list","values","toArray","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","customIndex","_add","viewCid","findByModelCid","modelCid","findByCid","index","_remove","some","size","CollectionView","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_isBuffering","triggerOnChildren","attachBuffer","_createBuffer","_onCollectionAdd","_onCollectionUpdate","sort","_sortViews","at","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","removedViews","_getRemovedViews","_updateIndices","_showEmptyView","removingViews","findByModel","_removeChildView","push","_renderChildren","preventRender","_ref","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","setFilter","currentIds","addedChildNotExists","removeModels","prevModel","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_index","_this3","_appendReorderedChildren","reorderOnSort","reorder","orderChanged","find","item","_this4","resortView","_destroyChildren","processedModels","_startBuffering","_showCollection","_endBuffering","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this5","comparator","sortBy","EmptyView","_getEmptyView","emptyViewOptions","_emptyViewIndex","addChildView","emptyView","childView","_createView","increment","laterView","ChildViewClass","collectionView","buffer","elBuffer","createBuffer","b","_insertBefore","_insertAfter","findPosition","beforeEl","ChildViewContainer","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// Trigger Method\r\n// --------------\r\n\r\nimport _ from 'underscore';\r\nimport getOption from './get-option';\r\n\r\n// split the event name on the \":\"\r\nconst splitter = /(^|:)(\\w)/gi;\r\n\r\n// take the event section (\"section1:section2:section3\")\r\n// and turn it in to uppercase name onSection1Section2Section3\r\nfunction getEventName(match, prefix, eventName) {\r\n  return eventName.toUpperCase();\r\n}\r\n\r\nconst getOnMethodName = _.memoize(function(event) {\r\n  return 'on' + event.replace(splitter, getEventName);\r\n});\r\n\r\n// Trigger an event and/or a corresponding method name. Examples:\r\n//\r\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\r\n// call the \"onFoo\" method.\r\n//\r\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\r\n// call the \"onFooBar\" method.\r\nexport function triggerMethod(event, ...args) {\r\n  // get the method name from the event name\r\n  const methodName = getOnMethodName(event);\r\n  const method = getOption.call(this, methodName);\r\n  let result;\r\n\r\n  // call the onMethodName if it exists\r\n  if (_.isFunction(method)) {\r\n    // pass all args, except the event name\r\n    result = method.apply(this, args);\r\n  }\r\n\r\n  // trigger the event\r\n  this.trigger.apply(this, arguments);\r\n\r\n  return result;\r\n}\r\n\r\n// triggerMethodOn invokes triggerMethod on a specific context\r\n//\r\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\r\n// will trigger a \"show\" event or invoke onShow the view.\r\nexport function triggerMethodOn(context, ...args) {\r\n  if (_.isFunction(context.triggerMethod)) {\r\n    return context.triggerMethod.apply(context, args);\r\n  }\r\n\r\n  return triggerMethod.apply(context, args);\r\n}\r\n","// DOM Refresh\r\n// -----------\r\n\r\nimport _ from 'underscore';\r\nimport { triggerMethodOn } from './trigger-method';\r\n\r\n// Trigger method on children unless a pure Backbone.View\r\nfunction triggerMethodChildren(view, event, shouldTrigger) {\r\n  if (!view._getImmediateChildren) { return; }\r\n  _.each(view._getImmediateChildren(), child => {\r\n    if (!shouldTrigger(child)) { return; }\r\n    triggerMethodOn(child, event, child);\r\n  });\r\n}\r\n\r\nfunction shouldTriggerAttach(view) {\r\n  return !view._isAttached;\r\n}\r\n\r\nfunction shouldAttach(view) {\r\n  if (!shouldTriggerAttach(view)) { return false; }\r\n  view._isAttached = true;\r\n  return true;\r\n}\r\n\r\nfunction shouldTriggerDetach(view) {\r\n  return view._isAttached;\r\n}\r\n\r\nfunction shouldDetach(view) {\r\n  if (!shouldTriggerDetach(view)) { return false; }\r\n  view._isAttached = false;\r\n  return true;\r\n}\r\n\r\nfunction triggerDOMRefresh(view) {\r\n  if (view._isAttached && view._isRendered) {\r\n    triggerMethodOn(view, 'dom:refresh', view);\r\n  }\r\n}\r\n\r\nfunction handleBeforeAttach() {\r\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\r\n}\r\n\r\nfunction handleAttach() {\r\n  triggerMethodChildren(this, 'attach', shouldAttach);\r\n  triggerDOMRefresh(this);\r\n}\r\n\r\nfunction handleBeforeDetach() {\r\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\r\n}\r\n\r\nfunction handleDetach() {\r\n  triggerMethodChildren(this, 'detach', shouldDetach);\r\n}\r\n\r\nfunction handleRender() {\r\n  triggerDOMRefresh(this);\r\n}\r\n\r\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\r\n// whenever a rendered view is attached or an attached view is rendered.\r\nfunction monitorViewEvents(view) {\r\n  if (view._areViewEventsMonitored) { return; }\r\n\r\n  view._areViewEventsMonitored = true;\r\n\r\n  view.on({\r\n    'before:attach': handleBeforeAttach,\r\n    'attach': handleAttach,\r\n    'before:detach': handleBeforeDetach,\r\n    'detach': handleDetach,\r\n    'render': handleRender\r\n  });\r\n}\r\n\r\nexport default monitorViewEvents;\r\n","// Bind Entity Events & Unbind Entity Events\r\n// -----------------------------------------\r\n//\r\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\r\n// to methods on a target object.\r\n//\r\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\r\n//\r\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\r\n// any object that has Backbone.Events mixed in) to bind the events from.\r\n//\r\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\r\n// configuration. Multiple handlers can be separated by a space. A\r\n// function can be supplied instead of a string handler name.\r\n\r\nimport _ from 'underscore';\r\nimport MarionetteError from '../error';\r\n\r\n// Bind/unbind the event to handlers specified as a string of\r\n// handler names on the target object\r\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\r\n  const methodNames = methods.split(/\\s+/);\r\n\r\n  _.each(methodNames, function(methodName) {\r\n    const method = target[methodName];\r\n    if (!method) {\r\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\r\n    }\r\n\r\n    target[actionName](entity, evt, method);\r\n  });\r\n}\r\n\r\n// generic looping function\r\nfunction iterateEvents(target, entity, bindings, actionName) {\r\n  if (!entity || !bindings) { return; }\r\n\r\n  // type-check bindings\r\n  if (!_.isObject(bindings)) {\r\n    throw new MarionetteError({\r\n      message: 'Bindings must be an object.',\r\n      url: 'marionette.functions.html#marionettebindevents'\r\n    });\r\n  }\r\n\r\n  // iterate the bindings and bind/unbind them\r\n  _.each(bindings, function(method, evt) {\r\n\r\n    // allow for a list of method names as a string\r\n    if (_.isString(method)) {\r\n      bindFromStrings(target, entity, evt, method, actionName);\r\n      return;\r\n    }\r\n\r\n    target[actionName](entity, evt, method);\r\n  });\r\n}\r\n\r\nfunction bindEvents(entity, bindings) {\r\n  iterateEvents(this, entity, bindings, 'listenTo');\r\n  return this;\r\n}\r\n\r\nfunction unbindEvents(entity, bindings) {\r\n  iterateEvents(this, entity, bindings, 'stopListening');\r\n  return this;\r\n}\r\n\r\n// Export Public API\r\nexport {\r\n  bindEvents,\r\n  unbindEvents\r\n};\r\n","// Bind/Unbind Radio Requests\r\n// -----------------------------------------\r\n//\r\n// These methods are used to bind/unbind a backbone.radio request\r\n// to methods on a target object.\r\n//\r\n// The first parameter, `target`, will set the context of the reply method\r\n//\r\n// The second parameter is the `Radio.channel` to bind the reply to.\r\n//\r\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\r\n// configuration. A function can be supplied instead of a string handler name.\r\n\r\nimport _ from 'underscore';\r\nimport normalizeMethods from './normalize-methods';\r\nimport MarionetteError from '../error';\r\n\r\nfunction iterateReplies(target, channel, bindings, actionName) {\r\n  if (!channel || !bindings) { return; }\r\n\r\n  // type-check bindings\r\n  if (!_.isObject(bindings)) {\r\n    throw new MarionetteError({\r\n      message: 'Bindings must be an object.',\r\n      url: 'marionette.functions.html#marionettebindrequests'\r\n    });\r\n  }\r\n\r\n  const normalizedRadioRequests = normalizeMethods.call(target, bindings);\r\n\r\n  channel[actionName](normalizedRadioRequests, target);\r\n}\r\n\r\nfunction bindRequests(channel, bindings) {\r\n  iterateReplies(this, channel, bindings, 'reply');\r\n  return this;\r\n}\r\n\r\nfunction unbindRequests(channel, bindings) {\r\n  iterateReplies(this, channel, bindings, 'stopReplying');\r\n  return this;\r\n}\r\n\r\nexport {\r\n  bindRequests,\r\n  unbindRequests\r\n};\r\n","import _ from 'underscore';\r\nimport _invoke from '../utils/invoke';\r\nimport { triggerMethod } from '../common/trigger-method';\r\nimport Marionette from '../backbone.marionette';\r\n\r\n// MixinOptions\r\n// - behaviors\r\n\r\n// Takes care of getting the behavior class\r\n// given options and a key.\r\n// If a user passes in options.behaviorClass\r\n// default to using that.\r\n// If a user passes in a Behavior Class directly, use that\r\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\r\nfunction getBehaviorClass(options, key) {\r\n  if (options.behaviorClass) {\r\n    return options.behaviorClass;\r\n    //treat functions as a Behavior constructor\r\n  } else if (_.isFunction(options)) {\r\n    return options;\r\n  }\r\n\r\n  // behaviorsLookup can be either a flat object or a method\r\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\r\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\r\n  }\r\n\r\n  return Marionette.Behaviors.behaviorsLookup[key];\r\n}\r\n\r\n// Iterate over the behaviors object, for each behavior\r\n// instantiate it and get its grouped behaviors.\r\n// This accepts a list of behaviors in either an object or array form\r\nfunction parseBehaviors(view, behaviors) {\r\n  return _.chain(behaviors).map(function(options, key) {\r\n    const BehaviorClass = getBehaviorClass(options, key);\r\n    //if we're passed a class directly instead of an object\r\n    const _options = options === BehaviorClass ? {} : options;\r\n    const behavior = new BehaviorClass(_options, view);\r\n    const nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\r\n\r\n    return [behavior].concat(nestedBehaviors);\r\n  }).flatten().value();\r\n}\r\n\r\nexport default {\r\n  _initBehaviors() {\r\n    this._behaviors = this._getBehaviors();\r\n  },\r\n\r\n  _getBehaviors() {\r\n    const behaviors = _.result(this, 'behaviors');\r\n\r\n    // Behaviors defined on a view can be a flat object literal\r\n    // or it can be a function that returns an object.\r\n    return _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\r\n  },\r\n\r\n  _getBehaviorTriggers() {\r\n    const triggers = _invoke(this._behaviors, 'getTriggers');\r\n    return _.extend({}, ...triggers);\r\n  },\r\n\r\n  _getBehaviorEvents() {\r\n    const events = _invoke(this._behaviors, 'getEvents');\r\n    return _.extend({}, ...events);\r\n  },\r\n\r\n  // proxy behavior $el to the view's $el.\r\n  _proxyBehaviorViewProperties() {\r\n    _invoke(this._behaviors, 'proxyViewProperties');\r\n  },\r\n\r\n  // delegate modelEvents and collectionEvents\r\n  _delegateBehaviorEntityEvents() {\r\n    _invoke(this._behaviors, 'delegateEntityEvents');\r\n  },\r\n\r\n  // undelegate modelEvents and collectionEvents\r\n  _undelegateBehaviorEntityEvents() {\r\n    _invoke(this._behaviors, 'undelegateEntityEvents');\r\n  },\r\n\r\n  _destroyBehaviors(args) {\r\n    // Call destroy on each behavior after\r\n    // destroying the view.\r\n    // This unbinds event listeners\r\n    // that behaviors have registered for.\r\n    _invoke(this._behaviors, 'destroy', ...args);\r\n  },\r\n\r\n  _bindBehaviorUIElements() {\r\n    _invoke(this._behaviors, 'bindUIElements');\r\n  },\r\n\r\n  _unbindBehaviorUIElements() {\r\n    _invoke(this._behaviors, 'unbindUIElements');\r\n  },\r\n\r\n  _triggerEventOnBehaviors() {\r\n    const behaviors = this._behaviors;\r\n    // Use good ol' for as this is a very hot function\r\n    for (let i = 0, length = behaviors && behaviors.length; i < length; i++) {\r\n      triggerMethod.apply(behaviors[i], arguments);\r\n    }\r\n  }\r\n};\r\n","import _ from 'underscore';\r\n\r\n// Borrow event splitter from Backbone\r\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\nfunction uniqueName(eventName, selector) {\r\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\r\n}\r\n\r\n// Set event name to be namespaced using a unique index\r\n// to generate a non colliding event namespace\r\n// http://api.jquery.com/event.namespace/\r\nconst getUniqueEventName = function(eventName) {\r\n  const match = eventName.match(delegateEventSplitter);\r\n  return uniqueName(match[1], match[2]);\r\n};\r\n\r\nexport default getUniqueEventName;\r\n","// Add Feature flags here\r\n// e.g. 'class' => false\r\nconst FEATURES = {\r\n  triggersStopPropagation: true,\r\n  triggersPreventDefault: true\r\n};\r\n\r\nfunction isEnabled(name) {\r\n  return !!FEATURES[name];\r\n}\r\n\r\nfunction setEnabled(name, state) {\r\n  return FEATURES[name] = state;\r\n}\r\n\r\nexport {\r\n  FEATURES,\r\n  setEnabled,\r\n  isEnabled\r\n};\r\n","import _ from 'underscore';\r\nimport getUniqueEventName from '../utils/get-unique-event-name';\r\nimport { isEnabled } from '../config/features';\r\n\r\n// Internal method to create an event handler for a given `triggerDef` like\r\n// 'click:foo'\r\nfunction buildViewTrigger(view, triggerDef) {\r\n  if (_.isString(triggerDef)) {\r\n    triggerDef = {event: triggerDef};\r\n  }\r\n\r\n  const eventName = triggerDef.event;\r\n\r\n  let shouldPreventDefault = !!triggerDef.preventDefault;\r\n\r\n  if (isEnabled('triggersPreventDefault')) {\r\n    shouldPreventDefault = triggerDef.preventDefault !== false;\r\n  }\r\n\r\n  let shouldStopPropagation = !!triggerDef.stopPropagation;\r\n\r\n  if (isEnabled('triggersStopPropagation')) {\r\n    shouldStopPropagation = triggerDef.stopPropagation !== false;\r\n  }\r\n\r\n  return function(event) {\r\n    if (shouldPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (shouldStopPropagation) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    view.triggerMethod(eventName, view, event);\r\n  };\r\n}\r\n\r\nexport default {\r\n\r\n  // Configure `triggers` to forward DOM events to view\r\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\r\n  _getViewTriggers(view, triggers) {\r\n    // Configure the triggers, prevent default\r\n    // action and stop propagation of DOM events\r\n    return _.reduce(triggers, (events, value, key) => {\r\n      key = getUniqueEventName(key);\r\n      events[key] = buildViewTrigger(view, value);\r\n      return events;\r\n    }, {});\r\n  }\r\n\r\n};\r\n","import { triggerMethodOn } from '../common/trigger-method';\r\n\r\nexport default function destroyBackboneView(view) {\r\n  if (!view.supportsDestroyLifecycle) {\r\n    triggerMethodOn(view, 'before:destroy', view);\r\n  }\r\n\r\n  const shouldTriggerDetach = !!view._isAttached;\r\n\r\n  if (shouldTriggerDetach) {\r\n    triggerMethodOn(view, 'before:detach', view);\r\n  }\r\n\r\n  view.remove();\r\n\r\n  if (shouldTriggerDetach) {\r\n    view._isAttached = false;\r\n    triggerMethodOn(view, 'detach', view);\r\n  }\r\n\r\n  view._isDestroyed = true;\r\n\r\n  if (!view.supportsDestroyLifecycle) {\r\n    triggerMethodOn(view, 'destroy', view);\r\n  }\r\n}\r\n","import _ from 'underscore';\r\nimport deprecate from '../utils/deprecate';\r\nimport MarionetteError from '../error';\r\nimport Region from '../region';\r\n\r\n// return the region instance from the definition\r\nexport default function(definition, defaults) {\r\n  if (definition instanceof Region) {\r\n    return definition;\r\n  }\r\n\r\n  return buildRegionFromDefinition(definition, defaults);\r\n}\r\n\r\nfunction buildRegionFromDefinition(definition, defaults) {\r\n  const opts = _.extend({}, defaults);\r\n\r\n  if (_.isString(definition)) {\r\n    _.extend(opts, { el: definition });\r\n\r\n    return buildRegionFromObject(opts);\r\n  }\r\n\r\n  if (_.isFunction(definition)) {\r\n    _.extend(opts, { regionClass: definition });\r\n\r\n    return buildRegionFromObject(opts);\r\n  }\r\n\r\n  if (_.isObject(definition)) {\r\n    if (definition.selector) {\r\n      deprecate('The selector option on a Region definition object is deprecated. Use el to pass a selector string');\r\n    }\r\n\r\n    _.extend(opts, { el: definition.selector }, definition);\r\n\r\n    return buildRegionFromObject(opts);\r\n  }\r\n\r\n  throw new MarionetteError({\r\n    message: 'Improper region configuration type.',\r\n    url: 'marionette.region.html#region-configuration-types'\r\n  });\r\n}\r\n\r\nfunction buildRegionFromObject(definition) {\r\n  const RegionClass = definition.regionClass\r\n\r\n  const options = _.omit(definition, 'regionClass');\r\n\r\n  return new RegionClass(options);\r\n}\r\n","import MarionetteError from '../error';\r\n\r\n// Placeholder method to be extended by the user.\r\n// The method should define the object that stores the behaviors.\r\n// i.e.\r\n//\r\n// ```js\r\n// Marionette.Behaviors.behaviorsLookup: function() {\r\n//   return App.Behaviors\r\n// }\r\n// ```\r\nexport default function behaviorsLookup() {\r\n  throw new MarionetteError({\r\n    message: 'You must define where your behaviors are stored.',\r\n    url: 'marionette.behaviors.md#behaviorslookup'\r\n  });\r\n}\r\n","//Internal utility for creating context style global utils\r\nconst proxy = function(method) {\r\n  return function(context, ...args) {\r\n    return method.apply(context, args);\r\n  };\r\n};\r\n\r\nexport default proxy;\r\n","// Marionette.extend\r\n// -----------------\r\n\r\nimport Backbone from 'backbone';\r\n\r\n// Borrow the Backbone `extend` method so we can use it as needed\r\nconst extend = Backbone.Model.extend;\r\n\r\nexport default extend;\r\n","/* global console */\r\n\r\nimport _ from 'underscore';\r\n\r\nimport Marionette from '../backbone.marionette';\r\n\r\nconst deprecate = function(message, test) {\r\n  if (_.isObject(message)) {\r\n    message = (\r\n      message.prev + ' is going to be removed in the future. ' +\r\n      'Please use ' + message.next + ' instead.' +\r\n      (message.url ? ' See: ' + message.url : '')\r\n    );\r\n  }\r\n\r\n  if (!Marionette.DEV_MODE) {\r\n    return;\r\n  }\r\n\r\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\r\n    deprecate._warn('Deprecation warning: ' + message);\r\n    deprecate._cache[message] = true;\r\n  }\r\n};\r\n\r\ndeprecate._console = typeof console !== 'undefined' ? console : {};\r\ndeprecate._warn = function() {\r\n  const warn = deprecate._console.warn || deprecate._console.log || _.noop;\r\n  return warn.apply(deprecate._console, arguments);\r\n};\r\ndeprecate._cache = {};\r\n\r\nexport default deprecate;\r\n","// Marionette.isNodeAttached\r\n// -------------------------\r\n\r\n// Determine if `el` is a child of the document\r\nconst isNodeAttached = function(el) {\r\n  return document.documentElement.contains(el && el.parentNode);\r\n};\r\n\r\nexport default isNodeAttached;\r\n","import _ from 'underscore';\r\n\r\n// Merge `keys` from `options` onto `this`\r\nconst mergeOptions = function(options, keys) {\r\n  if (!options) { return; }\r\n\r\n  _.each(keys, (key) => {\r\n    const option = options[key];\r\n    if (option !== undefined) {\r\n      this[key] = option;\r\n    }\r\n  });\r\n};\r\n\r\nexport default mergeOptions;\r\n","// Marionette.getOption\r\n// --------------------\r\n\r\n// Retrieve an object, function or other value from the\r\n// object or its `options`, with `options` taking precedence.\r\nconst getOption = function(optionName) {\r\n  if (!optionName) { return; }\r\n  if (this.options && (this.options[optionName] !== undefined)) {\r\n    return this.options[optionName];\r\n  } else {\r\n    return this[optionName];\r\n  }\r\n};\r\n\r\nexport default getOption;\r\n","import _ from 'underscore';\r\n\r\n// Marionette.normalizeMethods\r\n// ----------------------\r\n\r\n// Pass in a mapping of events => functions or function names\r\n// and return a mapping of events => functions\r\nconst normalizeMethods = function(hash) {\r\n  return _.reduce(hash, (normalizedHash, method, name) => {\r\n    if (!_.isFunction(method)) {\r\n      method = this[method];\r\n    }\r\n    if (method) {\r\n      normalizedHash[name] = method;\r\n    }\r\n    return normalizedHash;\r\n  }, {});\r\n};\r\n\r\nexport default normalizeMethods;\r\n","// Error\r\n// -----\r\n\r\nimport _ from 'underscore';\r\nimport extend from './utils/extend';\r\nimport {version} from '../package.json';\r\n\r\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\r\n\r\nconst MarionetteError = extend.call(Error, {\r\n  urlRoot: `http://marionettejs.com/docs/v${version}/`,\r\n\r\n  constructor(message, options) {\r\n    if (_.isObject(message)) {\r\n      options = message;\r\n      message = options.message;\r\n    } else if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    const error = Error.call(this, message);\r\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\r\n\r\n    this.captureStackTrace();\r\n\r\n    if (options.url) {\r\n      this.url = this.urlRoot + options.url;\r\n    }\r\n  },\r\n\r\n  captureStackTrace() {\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, MarionetteError);\r\n    }\r\n  },\r\n\r\n  toString() {\r\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\r\n  }\r\n});\r\n\r\nMarionetteError.extend = extend;\r\n\r\nexport default MarionetteError;\r\n","import _ from 'underscore';\r\n\r\n// Internal utility for setting options consistently across Mn\r\nconst setOptions = function(...args) {\r\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\r\n};\r\n\r\nexport default setOptions;\r\n","import _setOptions from '../utils/set-options';\r\nimport getOption from '../common/get-option';\r\nimport mergeOptions from '../common/merge-options';\r\nimport normalizeMethods from '../common/normalize-methods';\r\nimport {\r\n  bindEvents,\r\n  unbindEvents\r\n} from '../common/bind-events';\r\n\r\nexport default {\r\n\r\n  // Imports the \"normalizeMethods\" to transform hashes of\r\n  // events=>function references/names to a hash of events=>function references\r\n  normalizeMethods: normalizeMethods,\r\n\r\n  _setOptions: _setOptions,\r\n\r\n  // A handy way to merge passed-in options onto the instance\r\n  mergeOptions: mergeOptions,\r\n\r\n  // Enable getting options from this or this.options by name.\r\n  getOption: getOption,\r\n\r\n  // Enable binding view's events from another entity.\r\n  bindEvents: bindEvents,\r\n\r\n  // Enable unbinding view's events from another entity.\r\n  unbindEvents: unbindEvents\r\n};\r\n","import _ from 'underscore';\r\nimport Radio from 'backbone.radio';\r\n\r\nimport {\r\n  bindRequests,\r\n  unbindRequests\r\n} from '../common/bind-requests';\r\n\r\nimport {\r\n  bindEvents,\r\n  unbindEvents\r\n} from '../common/bind-events';\r\n\r\nimport MarionetteError from '../error';\r\n\r\n// MixinOptions\r\n// - channelName\r\n// - radioEvents\r\n// - radioRequests\r\n\r\nexport default {\r\n\r\n  _initRadio() {\r\n    const channelName = _.result(this, 'channelName');\r\n\r\n    if (!channelName) {\r\n      return;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Radio) {\r\n      throw new MarionetteError({\r\n        name: 'BackboneRadioMissing',\r\n        message: 'The dependency \"backbone.radio\" is missing.'\r\n      });\r\n    }\r\n\r\n    const channel = this._channel = Radio.channel(channelName);\r\n\r\n    const radioEvents = _.result(this, 'radioEvents');\r\n    this.bindEvents(channel, radioEvents);\r\n\r\n    const radioRequests = _.result(this, 'radioRequests');\r\n    this.bindRequests(channel, radioRequests);\r\n\r\n    this.on('destroy', this._destroyRadio);\r\n  },\r\n\r\n  _destroyRadio() {\r\n    this._channel.stopReplying(null, null, this);\r\n  },\r\n\r\n  getChannel() {\r\n    return this._channel;\r\n  },\r\n\r\n  // Proxy `bindEvents`\r\n  bindEvents: bindEvents,\r\n\r\n  // Proxy `unbindEvents`\r\n  unbindEvents: unbindEvents,\r\n\r\n  // Proxy `bindRequests`\r\n  bindRequests: bindRequests,\r\n\r\n  // Proxy `unbindRequests`\r\n  unbindRequests: unbindRequests\r\n\r\n};\r\n","// Object\r\n// ------\r\n\r\nimport _ from 'underscore';\r\nimport Backbone from 'backbone';\r\nimport extend from './utils/extend';\r\nimport { triggerMethod } from './common/trigger-method';\r\nimport CommonMixin from './mixins/common';\r\nimport RadioMixin from './mixins/radio';\r\n\r\nconst ClassOptions = [\r\n  'channelName',\r\n  'radioEvents',\r\n  'radioRequests'\r\n];\r\n\r\n// A Base Class that other Classes should descend from.\r\n// Object borrows many conventions and utilities from Backbone.\r\nconst MarionetteObject = function(options) {\r\n  this._setOptions(options);\r\n  this.mergeOptions(options, ClassOptions);\r\n  this.cid = _.uniqueId(this.cidPrefix);\r\n  this._initRadio();\r\n  this.initialize.apply(this, arguments);\r\n};\r\n\r\nMarionetteObject.extend = extend;\r\n\r\n// Object Methods\r\n// --------------\r\n\r\n// Ensure it can trigger events with Backbone.Events\r\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\r\n  cidPrefix: 'mno',\r\n\r\n  // for parity with Marionette.AbstractView lifecyle\r\n  _isDestroyed: false,\r\n\r\n  isDestroyed() {\r\n    return this._isDestroyed;\r\n  },\r\n\r\n  //this is a noop method intended to be overridden by classes that extend from this base\r\n  initialize() {},\r\n\r\n  destroy(...args) {\r\n    if (this._isDestroyed) { return this; }\r\n\r\n    this.triggerMethod('before:destroy', this, ...args);\r\n\r\n    this._isDestroyed = true;\r\n    this.triggerMethod('destroy', this, ...args);\r\n    this.stopListening();\r\n\r\n    return this;\r\n  },\r\n\r\n  triggerMethod: triggerMethod\r\n});\r\n\r\nexport default MarionetteObject;\r\n","// DomMixin\r\n//  ---------\r\n\r\nimport Backbone from 'backbone';\r\n\r\nexport default {\r\n  createBuffer() {\r\n    return document.createDocumentFragment();\r\n  },\r\n\r\n  appendChildren(el, children) {\r\n    Backbone.$(el).append(children);\r\n  },\r\n\r\n  beforeEl(el, sibling) {\r\n    Backbone.$(el).before(sibling);\r\n  },\r\n\r\n  replaceEl(newEl, oldEl) {\r\n    if (newEl === oldEl) {\r\n      return;\r\n    }\r\n\r\n    const parent = oldEl.parentNode;\r\n\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    parent.replaceChild(newEl, oldEl);\r\n  },\r\n\r\n  detachContents(el) {\r\n    Backbone.$(el).contents().detach();\r\n  },\r\n\r\n  setInnerContent(el, html) {\r\n    Backbone.$(el).html(html);\r\n  },\r\n\r\n  removeEl(el) {\r\n    Backbone.$(el).remove();\r\n  },\r\n\r\n  findEls(selector, context) {\r\n    return Backbone.$(selector, context);\r\n  }\r\n};\r\n","// Template Cache\r\n// --------------\r\n\r\nimport _ from 'underscore';\r\nimport DomMixin from './mixins/dom';\r\nimport MarionetteError from './error';\r\n\r\n// Manage templates stored in `<script>` blocks,\r\n// caching them for faster access.\r\nconst TemplateCache = function(templateId) {\r\n  this.templateId = templateId;\r\n};\r\n\r\n// TemplateCache object-level methods. Manage the template\r\n// caches from these method calls instead of creating\r\n// your own TemplateCache instances\r\n_.extend(TemplateCache, {\r\n  templateCaches: {},\r\n\r\n  // Get the specified template by id. Either\r\n  // retrieves the cached version, or loads it\r\n  // from the DOM.\r\n  get(templateId, options) {\r\n    let cachedTemplate = this.templateCaches[templateId];\r\n\r\n    if (!cachedTemplate) {\r\n      cachedTemplate = new TemplateCache(templateId);\r\n      this.templateCaches[templateId] = cachedTemplate;\r\n    }\r\n\r\n    return cachedTemplate.load(options);\r\n  },\r\n\r\n  // Clear templates from the cache. If no arguments\r\n  // are specified, clears all templates:\r\n  // `clear()`\r\n  //\r\n  // If arguments are specified, clears each of the\r\n  // specified templates from the cache:\r\n  // `clear(\"#t1\", \"#t2\", \"...\")`\r\n  clear(...args) {\r\n    let i;\r\n    const length = args.length;\r\n\r\n    if (length > 0) {\r\n      for (i = 0; i < length; i++) {\r\n        delete this.templateCaches[args[i]];\r\n      }\r\n    } else {\r\n      this.templateCaches = {};\r\n    }\r\n  }\r\n});\r\n\r\n// TemplateCache instance methods, allowing each\r\n// template cache object to manage its own state\r\n// and know whether or not it has been loaded\r\n_.extend(TemplateCache.prototype, DomMixin, {\r\n\r\n  // Internal method to load the template\r\n  load(options) {\r\n    // Guard clause to prevent loading this template more than once\r\n    if (this.compiledTemplate) {\r\n      return this.compiledTemplate;\r\n    }\r\n\r\n    // Load the template and compile it\r\n    const template = this.loadTemplate(this.templateId, options);\r\n    this.compiledTemplate = this.compileTemplate(template, options);\r\n\r\n    return this.compiledTemplate;\r\n  },\r\n\r\n  // Load a template from the DOM, by default. Override\r\n  // this method to provide your own template retrieval\r\n  // For asynchronous loading with AMD/RequireJS, consider\r\n  // using a template-loader plugin as described here:\r\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\r\n  loadTemplate(templateId, options) {\r\n    const $template = this.findEls(templateId);\r\n\r\n    if (!$template.length) {\r\n      throw new MarionetteError({\r\n        name: 'NoTemplateError',\r\n        message: `Could not find template: \"${templateId}\"`\r\n      });\r\n    }\r\n    return $template.html();\r\n  },\r\n\r\n  // Pre-compile the template before caching it. Override\r\n  // this method if you do not need to pre-compile a template\r\n  // (JST / RequireJS for example) or if you want to change\r\n  // the template engine used (Handebars, etc).\r\n  compileTemplate(rawTemplate, options) {\r\n    return _.template(rawTemplate, options);\r\n  }\r\n});\r\n\r\nexport default TemplateCache;\r\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\r\n// lodash v3, v4, and underscore.js\r\nimport _ from 'underscore';\r\n\r\nexport default _.invokeMap || _.invoke;\r\n","import _ from 'underscore';\r\n\r\nimport {\r\n  bindEvents,\r\n  unbindEvents\r\n} from '../common/bind-events';\r\n\r\n// MixinOptions\r\n// - collectionEvents\r\n// - modelEvents\r\n\r\nexport default {\r\n  // Handle `modelEvents`, and `collectionEvents` configuration\r\n  _delegateEntityEvents(model, collection) {\r\n    this._undelegateEntityEvents(model, collection);\r\n\r\n    const modelEvents = _.result(this, 'modelEvents');\r\n    bindEvents.call(this, model, modelEvents);\r\n\r\n    const collectionEvents = _.result(this, 'collectionEvents');\r\n    bindEvents.call(this, collection, collectionEvents);\r\n  },\r\n\r\n  _undelegateEntityEvents(model, collection) {\r\n    const modelEvents = _.result(this, 'modelEvents');\r\n    unbindEvents.call(this, model, modelEvents);\r\n\r\n    const collectionEvents = _.result(this, 'collectionEvents');\r\n    unbindEvents.call(this, collection, collectionEvents);\r\n  }\r\n};\r\n","import _ from 'underscore';\r\n// allows for the use of the @ui. syntax within\r\n// a given key for triggers and events\r\n// swaps the @ui with the associated selector.\r\n// Returns a new, non-mutated, parsed events hash.\r\nconst normalizeUIKeys = function(hash, ui) {\r\n  return _.reduce(hash, (memo, val, key) => {\r\n    const normalizedKey = normalizeUIString(key, ui);\r\n    memo[normalizedKey] = val;\r\n    return memo;\r\n  }, {});\r\n};\r\n\r\n// utility method for parsing @ui. syntax strings\r\n// into associated selector\r\nconst normalizeUIString = function(uiString, ui) {\r\n  return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, (r) => {\r\n    return ui[r.slice(4)];\r\n  });\r\n};\r\n\r\n// allows for the use of the @ui. syntax within\r\n// a given value for regions\r\n// swaps the @ui with the associated selector\r\nconst normalizeUIValues = function(hash, ui, properties) {\r\n  _.each(hash, (val, key) => {\r\n    if (_.isString(val)) {\r\n      hash[key] = normalizeUIString(val, ui);\r\n    } else if (_.isObject(val) && _.isArray(properties)) {\r\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\r\n      /* Value is an object, and we got an array of embedded property names to normalize. */\r\n      _.each(properties, (property) => {\r\n        const propertyVal = val[property];\r\n        if (_.isString(propertyVal)) {\r\n          val[property] = normalizeUIString(propertyVal, ui);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return hash;\r\n};\r\n\r\nexport default {\r\n\r\n  // normalize the keys of passed hash with the views `ui` selectors.\r\n  // `{\"@ui.foo\": \"bar\"}`\r\n  normalizeUIKeys(hash) {\r\n    const uiBindings = this._getUIBindings();\r\n    return normalizeUIKeys(hash, uiBindings);\r\n  },\r\n\r\n  // normalize the passed string with the views `ui` selectors.\r\n  // `\"@ui.bar\"`\r\n  normalizeUIString(uiString) {\r\n    const uiBindings = this._getUIBindings();\r\n    return normalizeUIString(uiString, uiBindings);\r\n  },\r\n\r\n  // normalize the values of passed hash with the views `ui` selectors.\r\n  // `{foo: \"@ui.bar\"}`\r\n  normalizeUIValues(hash, properties) {\r\n    const uiBindings = this._getUIBindings();\r\n    return normalizeUIValues(hash, uiBindings, properties);\r\n  },\r\n\r\n  _getUIBindings() {\r\n    const uiBindings = _.result(this, '_uiBindings');\r\n    const ui = _.result(this, 'ui');\r\n    return uiBindings || ui;\r\n  },\r\n\r\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\r\n  // the associated jQuery selectors.\r\n  _bindUIElements() {\r\n    if (!this.ui) { return; }\r\n\r\n    // store the ui hash in _uiBindings so they can be reset later\r\n    // and so re-rendering the view will be able to find the bindings\r\n    if (!this._uiBindings) {\r\n      this._uiBindings = this.ui;\r\n    }\r\n\r\n    // get the bindings result, as a function or otherwise\r\n    const bindings = _.result(this, '_uiBindings');\r\n\r\n    // empty the ui so we don't have anything to start with\r\n    this._ui = {};\r\n\r\n    // bind each of the selectors\r\n    _.each(bindings, (selector, key) => {\r\n      this._ui[key] = this.$(selector);\r\n    });\r\n\r\n    this.ui = this._ui;\r\n  },\r\n\r\n  _unbindUIElements() {\r\n    if (!this.ui || !this._uiBindings) { return; }\r\n\r\n    // delete all of the existing ui bindings\r\n    _.each(this.ui, ($el, name) => {\r\n      delete this.ui[name];\r\n    });\r\n\r\n    // reset the ui element to the original bindings configuration\r\n    this.ui = this._uiBindings;\r\n    delete this._uiBindings;\r\n    delete this._ui;\r\n  },\r\n\r\n  _getUI(name) {\r\n    return this._ui[name];\r\n  }\r\n};\r\n","// ViewMixin\r\n//  ---------\r\n\r\nimport Backbone from 'backbone';\r\nimport _ from 'underscore';\r\nimport { triggerMethod } from '../common/trigger-method';\r\nimport BehaviorsMixin from './behaviors';\r\nimport CommonMixin from './common';\r\nimport DelegateEntityEventsMixin from './delegate-entity-events';\r\nimport DomMixin from './dom';\r\nimport TriggersMixin from './triggers';\r\nimport UIMixin from './ui';\r\n\r\n// MixinOptions\r\n// - behaviors\r\n// - childViewEventPrefix\r\n// - childViewEvents\r\n// - childViewTriggers\r\n// - collectionEvents\r\n// - modelEvents\r\n// - triggers\r\n// - ui\r\n\r\n\r\nconst ViewMixin = {\r\n  supportsRenderLifecycle: true,\r\n  supportsDestroyLifecycle: true,\r\n\r\n  _isDestroyed: false,\r\n\r\n  isDestroyed() {\r\n    return !!this._isDestroyed;\r\n  },\r\n\r\n  _isRendered: false,\r\n\r\n  isRendered() {\r\n    return !!this._isRendered;\r\n  },\r\n\r\n  _isAttached: false,\r\n\r\n  isAttached() {\r\n    return !!this._isAttached;\r\n  },\r\n\r\n  // Overriding Backbone.View's `delegateEvents` to handle\r\n  // `events` and `triggers`\r\n  delegateEvents(eventsArg) {\r\n\r\n    this._proxyBehaviorViewProperties();\r\n    this._buildEventProxies();\r\n\r\n    const viewEvents = this._getEvents(eventsArg);\r\n\r\n    if (typeof eventsArg === 'undefined') {\r\n      this.events = viewEvents;\r\n    }\r\n\r\n    const combinedEvents = _.extend({},\r\n      this._getBehaviorEvents(),\r\n      viewEvents,\r\n      this._getBehaviorTriggers(),\r\n      this.getTriggers()\r\n    );\r\n\r\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\r\n\r\n    return this;\r\n  },\r\n\r\n  _getEvents(eventsArg) {\r\n    const events = eventsArg || this.events;\r\n\r\n    if (_.isFunction(events)) {\r\n      return this.normalizeUIKeys(events.call(this));\r\n    }\r\n\r\n    return this.normalizeUIKeys(events);\r\n  },\r\n\r\n  // Configure `triggers` to forward DOM events to view\r\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\r\n  getTriggers() {\r\n    if (!this.triggers) { return; }\r\n\r\n    // Allow `triggers` to be configured as a function\r\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\r\n\r\n    // Configure the triggers, prevent default\r\n    // action and stop propagation of DOM events\r\n    return this._getViewTriggers(this, triggers);\r\n  },\r\n\r\n  // Handle `modelEvents`, and `collectionEvents` configuration\r\n  delegateEntityEvents() {\r\n    this._delegateEntityEvents(this.model, this.collection);\r\n\r\n    // bind each behaviors model and collection events\r\n    this._delegateBehaviorEntityEvents();\r\n\r\n    return this;\r\n  },\r\n\r\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\r\n  undelegateEntityEvents() {\r\n    this._undelegateEntityEvents(this.model, this.collection);\r\n\r\n    // unbind each behaviors model and collection events\r\n    this._undelegateBehaviorEntityEvents();\r\n\r\n    return this;\r\n  },\r\n\r\n  // Handle destroying the view and its children.\r\n  destroy(...args) {\r\n    if (this._isDestroyed) { return this; }\r\n    const shouldTriggerDetach = !!this._isAttached;\r\n\r\n    this.triggerMethod('before:destroy', this, ...args);\r\n    if (shouldTriggerDetach) {\r\n      this.triggerMethod('before:detach', this);\r\n    }\r\n\r\n    // unbind UI elements\r\n    this.unbindUIElements();\r\n\r\n    // remove the view from the DOM\r\n    this.removeEl(this.el);\r\n\r\n    if (shouldTriggerDetach) {\r\n      this._isAttached = false;\r\n      this.triggerMethod('detach', this);\r\n    }\r\n\r\n    // remove children after the remove to prevent extra paints\r\n    this._removeChildren();\r\n\r\n    this._destroyBehaviors(args);\r\n\r\n    this._isDestroyed = true;\r\n    this._isRendered = false;\r\n    this.triggerMethod('destroy', this, ...args);\r\n\r\n    this.stopListening();\r\n\r\n    return this;\r\n  },\r\n\r\n  bindUIElements() {\r\n    this._bindUIElements();\r\n    this._bindBehaviorUIElements();\r\n\r\n    return this;\r\n  },\r\n\r\n  // This method unbinds the elements specified in the \"ui\" hash\r\n  unbindUIElements() {\r\n    this._unbindUIElements();\r\n    this._unbindBehaviorUIElements();\r\n\r\n    return this;\r\n  },\r\n\r\n  getUI(name) {\r\n    return this._getUI(name);\r\n  },\r\n\r\n  // used as the prefix for child view events\r\n  // that are forwarded through the layoutview\r\n  childViewEventPrefix: 'childview',\r\n\r\n  // import the `triggerMethod` to trigger events with corresponding\r\n  // methods if the method exists\r\n  triggerMethod() {\r\n    const ret = triggerMethod.apply(this, arguments);\r\n\r\n    this._triggerEventOnBehaviors.apply(this, arguments);\r\n\r\n    return ret;\r\n  },\r\n\r\n  // Cache `childViewEvents` and `childViewTriggers`\r\n  _buildEventProxies() {\r\n    this._childViewEvents = _.result(this, 'childViewEvents');\r\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\r\n  },\r\n\r\n  _proxyChildViewEvents(view) {\r\n    this.listenTo(view, 'all', this._childViewEventHandler);\r\n  },\r\n\r\n  _childViewEventHandler(eventName, ...args) {\r\n    const childViewEvents = this.normalizeMethods(this._childViewEvents);\r\n\r\n    // call collectionView childViewEvent if defined\r\n    if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\r\n      childViewEvents[eventName].apply(this, args);\r\n    }\r\n\r\n    // use the parent view's proxyEvent handlers\r\n    const childViewTriggers = this._childViewTriggers;\r\n\r\n    // Call the event with the proxy name on the parent layout\r\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\r\n      this.triggerMethod(childViewTriggers[eventName], ...args);\r\n    }\r\n\r\n    const prefix = _.result(this, 'childViewEventPrefix');\r\n\r\n    if (prefix !== false) {\r\n      const childEventName = prefix + ':' + eventName;\r\n\r\n      this.triggerMethod(childEventName, ...args);\r\n    }\r\n  }\r\n};\r\n\r\n_.extend(ViewMixin, DomMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\r\n\r\nexport default ViewMixin;\r\n","// Region\r\n// ------\r\n\r\nimport _ from 'underscore';\r\nimport Backbone from 'backbone';\r\nimport deprecate from './utils/deprecate';\r\nimport destroyBackboneView from './utils/destroy-backbone-view';\r\nimport monitorViewEvents from './common/monitor-view-events';\r\nimport isNodeAttached from './common/is-node-attached';\r\nimport { triggerMethodOn } from './common/trigger-method';\r\nimport DomMixin from './mixins/dom';\r\nimport MarionetteObject from './object';\r\nimport MarionetteError from './error';\r\nimport View from './view';\r\n\r\nconst ClassOptions = [\r\n  'allowMissingEl',\r\n  'parentEl',\r\n  'replaceElement'\r\n];\r\n\r\nconst Region = MarionetteObject.extend({\r\n  cidPrefix: 'mnr',\r\n  replaceElement: false,\r\n  _isReplaced: false,\r\n  _isSwappingView: false,\r\n\r\n  constructor(options) {\r\n    this._setOptions(options);\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    // getOption necessary because options.el may be passed as undefined\r\n    this._initEl = this.el = this.getOption('el');\r\n\r\n    // Handle when this.el is passed in as a $ wrapped element.\r\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\r\n\r\n    if (!this.el) {\r\n      throw new MarionetteError({\r\n        name: 'NoElError',\r\n        message: 'An \"el\" must be specified for a region.'\r\n      });\r\n    }\r\n\r\n    this.$el = this.getEl(this.el);\r\n    MarionetteObject.call(this, options);\r\n  },\r\n\r\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\r\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\r\n  // option can be used to prevent a view from the old view being destroyed on show.\r\n  show(view, options) {\r\n    if (!this._ensureElement(options)) {\r\n      return;\r\n    }\r\n\r\n    view = this._getView(view, options);\r\n\r\n    if (view === this.currentView) { return this; }\r\n\r\n    this._isSwappingView = !!this.currentView;\r\n\r\n    this.triggerMethod('before:show', this, view, options);\r\n\r\n    // Assume an attached view is already in the region for pre-existing DOM\r\n    if (!view._isAttached) {\r\n      this.empty(options);\r\n    }\r\n\r\n    this._setupChildView(view);\r\n\r\n    this._renderView(view);\r\n\r\n    this._attachView(view, options);\r\n\r\n    this.currentView = view;\r\n\r\n    this.triggerMethod('show', this, view, options);\r\n\r\n    this._isSwappingView = false;\r\n\r\n    return this;\r\n  },\r\n\r\n  _setupChildView(view) {\r\n    monitorViewEvents(view);\r\n\r\n    this._proxyChildViewEvents(view);\r\n\r\n    // We need to listen for if a view is destroyed in a way other than through the region.\r\n    // If this happens we need to remove the reference to the currentView since once a view\r\n    // has been destroyed we can not reuse it.\r\n    view.on('destroy', this._empty, this);\r\n  },\r\n\r\n  _proxyChildViewEvents(view) {\r\n    const parentView = this._parentView;\r\n\r\n    if (!parentView) { return; }\r\n\r\n    parentView._proxyChildViewEvents(view);\r\n  },\r\n\r\n  _renderView(view) {\r\n    if (view._isRendered) {\r\n      return;\r\n    }\r\n\r\n    if (!view.supportsRenderLifecycle) {\r\n      triggerMethodOn(view, 'before:render', view);\r\n    }\r\n\r\n    view.render();\r\n\r\n    if (!view.supportsRenderLifecycle) {\r\n      view._isRendered = true;\r\n      triggerMethodOn(view, 'render', view);\r\n    }\r\n  },\r\n\r\n  _attachView(view, options = {}) {\r\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\r\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\r\n\r\n    if (shouldTriggerAttach) {\r\n      triggerMethodOn(view, 'before:attach', view);\r\n    }\r\n\r\n    if (shouldReplaceEl) {\r\n      this._replaceEl(view);\r\n    } else {\r\n      this.attachHtml(view);\r\n    }\r\n\r\n    if (shouldTriggerAttach) {\r\n      view._isAttached = true;\r\n      triggerMethodOn(view, 'attach', view);\r\n    }\r\n  },\r\n\r\n  _ensureElement(options = {}) {\r\n    if (!_.isObject(this.el)) {\r\n      this.$el = this.getEl(this.el);\r\n      this.el = this.$el[0];\r\n    }\r\n\r\n    if (!this.$el || this.$el.length === 0) {\r\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\r\n\r\n      if (allowMissingEl) {\r\n        return false;\r\n      } else {\r\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n\r\n  _getView(view) {\r\n    if (!view) {\r\n      throw new MarionetteError({\r\n        name: 'ViewNotValid',\r\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\r\n      });\r\n    }\r\n\r\n    if (view._isDestroyed) {\r\n      throw new MarionetteError({\r\n        name: 'ViewDestroyedError',\r\n        message: `View (cid: \"${view.cid}\") has already been destroyed and cannot be used.`\r\n      });\r\n    }\r\n\r\n    if (view instanceof Backbone.View) {\r\n      return view;\r\n    }\r\n\r\n    const viewOptions = this._getViewOptions(view);\r\n\r\n    return new View(viewOptions);\r\n  },\r\n\r\n  // This allows for a template or a static string to be\r\n  // used as a template\r\n  _getViewOptions(viewOptions) {\r\n    if (_.isFunction(viewOptions)) {\r\n      return { template: viewOptions };\r\n    }\r\n\r\n    if (_.isObject(viewOptions)) {\r\n      return viewOptions;\r\n    }\r\n\r\n    const template = function() { return viewOptions; };\r\n\r\n    return { template };\r\n  },\r\n\r\n  // Override this method to change how the region finds the DOM element that it manages. Return\r\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\r\n  getEl(el) {\r\n    return this.findEls(el, _.result(this, 'parentEl'));\r\n  },\r\n\r\n  _replaceEl(view) {\r\n    // always restore the el to ensure the regions el is present before replacing\r\n    this._restoreEl();\r\n\r\n    view.on('before:destroy', this._restoreEl, this);\r\n\r\n    this.replaceEl(view.el, this.el);\r\n\r\n    this._isReplaced = true;\r\n  },\r\n\r\n  // Restore the region's element in the DOM.\r\n  _restoreEl() {\r\n    // There is nothing to replace\r\n    if (!this._isReplaced) {\r\n      return;\r\n    }\r\n\r\n    const view = this.currentView;\r\n\r\n    if (!view) {\r\n      return;\r\n    }\r\n\r\n    this.replaceEl(this.el, view.el);\r\n\r\n    this._isReplaced = false;\r\n  },\r\n\r\n  // Check to see if the region's el was replaced.\r\n  isReplaced() {\r\n    return !!this._isReplaced;\r\n  },\r\n\r\n  // Check to see if a view is being swapped by another\r\n  isSwappingView() {\r\n    return !!this._isSwappingView;\r\n  },\r\n\r\n  // Override this method to change how the new view is appended to the `$el` that the\r\n  // region is managing\r\n  attachHtml(view) {\r\n    this.appendChildren(this.el, view.el);\r\n  },\r\n\r\n  // Destroy the current view, if there is one. If there is no current view, it does\r\n  // nothing and returns immediately.\r\n  empty(options = { allowMissingEl: true }) {\r\n    const view = this.currentView;\r\n\r\n    // If there is no view in the region we should only detach current html\r\n    if (!view) {\r\n      if (this._ensureElement(options)) {\r\n        this.detachHtml();\r\n      }\r\n      return this;\r\n    }\r\n\r\n    const shouldDestroy = !options.preventDestroy;\r\n\r\n    if (!shouldDestroy) {\r\n      deprecate('The preventDestroy option is deprecated. Use Region#detachView');\r\n    }\r\n\r\n    this._empty(view, shouldDestroy);\r\n    return this;\r\n  },\r\n\r\n  _empty(view, shouldDestroy) {\r\n    view.off('destroy', this._empty, this);\r\n    this.triggerMethod('before:empty', this, view);\r\n\r\n    this._restoreEl();\r\n\r\n    delete this.currentView;\r\n\r\n    if (!view._isDestroyed) {\r\n      if (shouldDestroy) {\r\n        this.removeView(view);\r\n      } else {\r\n        this._detachView(view);\r\n      }\r\n      this._stopChildViewEvents(view);\r\n    }\r\n\r\n    this.triggerMethod('empty', this, view);\r\n  },\r\n\r\n  _stopChildViewEvents(view) {\r\n    const parentView = this._parentView;\r\n\r\n    if (!parentView) { return; }\r\n\r\n    this._parentView.stopListening(view);\r\n  },\r\n\r\n  destroyView(view) {\r\n    if (view.destroy) {\r\n      view.destroy();\r\n    } else {\r\n      destroyBackboneView(view);\r\n    }\r\n  },\r\n\r\n  removeView(view) {\r\n    this.destroyView(view);\r\n  },\r\n\r\n  detachView() {\r\n    const view = this.currentView;\r\n\r\n    if (!view) {\r\n      return;\r\n    }\r\n\r\n    this._empty(view);\r\n\r\n    return view;\r\n  },\r\n\r\n  _detachView(view) {\r\n    const shouldTriggerDetach = !!view._isAttached;\r\n    if (shouldTriggerDetach) {\r\n      triggerMethodOn(view, 'before:detach', view);\r\n    }\r\n\r\n    this.detachHtml();\r\n\r\n    if (shouldTriggerDetach) {\r\n      view._isAttached = false;\r\n      triggerMethodOn(view, 'detach', view);\r\n    }\r\n  },\r\n\r\n  // Override this method to change how the region detaches current content\r\n  detachHtml() {\r\n    this.detachContents(this.el);\r\n  },\r\n\r\n  // Checks whether a view is currently present within the region. Returns `true` if there is\r\n  // and `false` if no view is present.\r\n  hasView() {\r\n    return !!this.currentView;\r\n  },\r\n\r\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\r\n  // The next time a view is shown via this region, the region will re-query the DOM for\r\n  // the region's `el`.\r\n  reset(options) {\r\n    this.empty(options);\r\n\r\n    if (this.$el) {\r\n      this.el = this._initEl;\r\n    }\r\n\r\n    delete this.$el;\r\n    return this;\r\n  },\r\n\r\n  destroy(options) {\r\n    this.reset(options);\r\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\r\n  }\r\n});\r\n\r\n_.extend(Region.prototype, DomMixin);\r\n\r\nexport default Region;\r\n","import _ from 'underscore';\r\nimport _invoke from '../utils/invoke';\r\nimport buildRegion from '../common/build-region';\r\nimport Region from '../region';\r\n\r\n// MixinOptions\r\n// - regions\r\n// - regionClass\r\n\r\nexport default {\r\n  regionClass: Region,\r\n\r\n  // Internal method to initialize the regions that have been defined in a\r\n  // `regions` attribute on this View.\r\n  _initRegions() {\r\n\r\n    // init regions hash\r\n    this.regions = this.regions || {};\r\n    this._regions = {};\r\n\r\n    this.addRegions(_.result(this, 'regions'));\r\n  },\r\n\r\n  // Internal method to re-initialize all of the regions by updating\r\n  // the `el` that they point to\r\n  _reInitRegions() {\r\n    _invoke(this._regions, 'reset');\r\n  },\r\n\r\n  // Add a single region, by name, to the View\r\n  addRegion(name, definition) {\r\n    const regions = {};\r\n    regions[name] = definition;\r\n    return this.addRegions(regions)[name];\r\n  },\r\n\r\n  // Add multiple regions as a {name: definition, name2: def2} object literal\r\n  addRegions(regions) {\r\n    // If there's nothing to add, stop here.\r\n    if (_.isEmpty(regions)) {\r\n      return;\r\n    }\r\n\r\n    // Normalize region selectors hash to allow\r\n    // a user to use the @ui. syntax.\r\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\r\n\r\n    // Add the regions definitions to the regions property\r\n    this.regions = _.extend({}, this.regions, regions);\r\n\r\n    return this._addRegions(regions);\r\n  },\r\n\r\n  // internal method to build and add regions\r\n  _addRegions(regionDefinitions) {\r\n    const defaults = {\r\n      regionClass: this.regionClass,\r\n      parentEl: _.partial(_.result, this, 'el')\r\n    };\r\n\r\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\r\n      regions[name] = buildRegion(definition, defaults);\r\n      this._addRegion(regions[name], name);\r\n      return regions;\r\n    }, {});\r\n  },\r\n\r\n  _addRegion(region, name) {\r\n    this.triggerMethod('before:add:region', this, name, region);\r\n\r\n    region._parentView = this;\r\n\r\n    this._regions[name] = region;\r\n\r\n    this.triggerMethod('add:region', this, name, region);\r\n  },\r\n\r\n  // Remove a single region from the View, by name\r\n  removeRegion(name) {\r\n    const region = this._regions[name];\r\n\r\n    this._removeRegion(region, name);\r\n\r\n    return region;\r\n  },\r\n\r\n  // Remove all regions from the View\r\n  removeRegions() {\r\n    const regions = this.getRegions();\r\n\r\n    _.each(this._regions, _.bind(this._removeRegion, this));\r\n\r\n    return regions;\r\n  },\r\n\r\n  _removeRegion(region, name) {\r\n    this.triggerMethod('before:remove:region', this, name, region);\r\n\r\n    region.destroy();\r\n\r\n    delete this.regions[name];\r\n    delete this._regions[name];\r\n\r\n    this.triggerMethod('remove:region', this, name, region);\r\n  },\r\n\r\n  // Empty all regions in the region manager, but\r\n  // leave them attached\r\n  emptyRegions() {\r\n    const regions = this.getRegions();\r\n    _invoke(regions, 'empty');\r\n    return regions;\r\n  },\r\n\r\n  // Checks to see if view contains region\r\n  // Accepts the region name\r\n  // hasRegion('main')\r\n  hasRegion(name) {\r\n    return !!this.getRegion(name);\r\n  },\r\n\r\n  // Provides access to regions\r\n  // Accepts the region name\r\n  // getRegion('main')\r\n  getRegion(name) {\r\n    return this._regions[name];\r\n  },\r\n\r\n  // Get all regions\r\n  getRegions() {\r\n    return _.clone(this._regions);\r\n  },\r\n\r\n  showChildView(name, view, ...args) {\r\n    const region = this.getRegion(name);\r\n    return region.show(view, ...args);\r\n  },\r\n\r\n  detachChildView(name) {\r\n    return this.getRegion(name).detachView();\r\n  },\r\n\r\n  getChildView(name) {\r\n    return this.getRegion(name).currentView;\r\n  }\r\n\r\n};\r\n","// Renderer\r\n// --------\r\n\r\nimport _ from 'underscore';\r\nimport MarionetteError from '../error';\r\nimport TemplateCache from '../template-cache';\r\n\r\n// Render a template with data by passing in the template\r\n// selector and the data to render.\r\nconst Renderer = {\r\n\r\n  // Render a template with data. The `template` parameter is\r\n  // passed to the `TemplateCache` object to retrieve the\r\n  // template function. Override this method to provide your own\r\n  // custom rendering and template handling for all of Marionette.\r\n  render(template, data) {\r\n    if (!template) {\r\n      throw new MarionetteError({\r\n        name: 'TemplateNotFoundError',\r\n        message: 'Cannot render the template since its false, null or undefined.'\r\n      });\r\n    }\r\n\r\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\r\n\r\n    return templateFunc(data);\r\n  }\r\n};\r\n\r\nexport default Renderer;\r\n","// View\r\n// ---------\r\n\r\nimport _ from 'underscore';\r\nimport Backbone from 'backbone';\r\nimport isNodeAttached from './common/is-node-attached';\r\nimport monitorViewEvents from './common/monitor-view-events';\r\nimport ViewMixin from './mixins/view';\r\nimport RegionsMixin from './mixins/regions';\r\nimport Renderer from './config/renderer';\r\n\r\nconst ClassOptions = [\r\n  'behaviors',\r\n  'childViewEventPrefix',\r\n  'childViewEvents',\r\n  'childViewTriggers',\r\n  'collectionEvents',\r\n  'events',\r\n  'modelEvents',\r\n  'regionClass',\r\n  'regions',\r\n  'template',\r\n  'templateContext',\r\n  'triggers',\r\n  'ui'\r\n];\r\n\r\n// The standard view. Includes view events, automatic rendering\r\n// of Underscore templates, nested views, and more.\r\nconst View = Backbone.View.extend({\r\n\r\n  constructor(options) {\r\n    this.render = _.bind(this.render, this);\r\n\r\n    this._setOptions(options);\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    monitorViewEvents(this);\r\n\r\n    this._initBehaviors();\r\n    this._initRegions();\r\n\r\n    const args = Array.prototype.slice.call(arguments);\r\n    args[0] = this.options;\r\n    Backbone.View.prototype.constructor.apply(this, args);\r\n\r\n    this.delegateEntityEvents();\r\n  },\r\n\r\n  // Serialize the view's model *or* collection, if\r\n  // it exists, for the template\r\n  serializeData() {\r\n    if (!this.model && !this.collection) {\r\n      return {};\r\n    }\r\n\r\n    // If we have a model, we serialize that\r\n    if (this.model) {\r\n      return this.serializeModel();\r\n    }\r\n\r\n    // Otherwise, we serialize the collection,\r\n    // making it available under the `items` property\r\n    return {\r\n      items: this.serializeCollection()\r\n    };\r\n  },\r\n\r\n  // Prepares the special `model` property of a view\r\n  // for being displayed in the template. By default\r\n  // we simply clone the attributes. Override this if\r\n  // you need a custom transformation for your view's model\r\n  serializeModel() {\r\n    if (!this.model) { return {}; }\r\n    return _.clone(this.model.attributes);\r\n  },\r\n\r\n  // Serialize a collection by cloning each of\r\n  // its model's attributes\r\n  serializeCollection() {\r\n    if (!this.collection) { return {}; }\r\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\r\n  },\r\n\r\n  // Overriding Backbone.View's `setElement` to handle\r\n  // if an el was previously defined. If so, the view might be\r\n  // rendered or attached on setElement.\r\n  setElement() {\r\n    const hasEl = !!this.el;\r\n\r\n    Backbone.View.prototype.setElement.apply(this, arguments);\r\n\r\n    if (hasEl) {\r\n      this._isRendered = !!this.$el.length;\r\n      this._isAttached = isNodeAttached(this.el);\r\n    }\r\n\r\n    if (this._isRendered) {\r\n      this.bindUIElements();\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Render the view, defaulting to underscore.js templates.\r\n  // You can override this in your view definition to provide\r\n  // a very specific rendering for your view. In general, though,\r\n  // you should override the `Marionette.Renderer` object to\r\n  // change how Marionette renders views.\r\n  // Subsequent renders after the first will re-render all nested\r\n  // views.\r\n  render() {\r\n    if (this._isDestroyed) { return this; }\r\n\r\n    this.triggerMethod('before:render', this);\r\n\r\n    // If this is not the first render call, then we need to\r\n    // re-initialize the `el` for each region\r\n    if (this._isRendered) {\r\n      this._reInitRegions();\r\n    }\r\n\r\n    this._renderTemplate();\r\n    this.bindUIElements();\r\n\r\n    this._isRendered = true;\r\n    this.triggerMethod('render', this);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Internal method to render the template with the serialized data\r\n  // and template context via the `Marionette.Renderer` object.\r\n  _renderTemplate() {\r\n    const template = this.getTemplate();\r\n\r\n    // Allow template-less views\r\n    if (template === false) {\r\n      return;\r\n    }\r\n\r\n    // Add in entity data and template context\r\n    const data = this.mixinTemplateContext(this.serializeData());\r\n\r\n    // Render and add to el\r\n    const html = Renderer.render(template, data, this);\r\n    this.attachElContent(html);\r\n  },\r\n\r\n  // Get the template for this view\r\n  // instance. You can set a `template` attribute in the view\r\n  // definition or pass a `template: \"whatever\"` parameter in\r\n  // to the constructor options.\r\n  getTemplate() {\r\n    return this.template;\r\n  },\r\n\r\n  // Mix in template context methods. Looks for a\r\n  // `templateContext` attribute, which can either be an\r\n  // object literal, or a function that returns an object\r\n  // literal. All methods and attributes from this object\r\n  // are copies to the object passed in.\r\n  mixinTemplateContext(target = {}) {\r\n    const templateContext = _.result(this, 'templateContext');\r\n    return _.extend(target, templateContext);\r\n  },\r\n\r\n  // Attaches the content of a given view.\r\n  // This method can be overridden to optimize rendering,\r\n  // or to render in a non standard way.\r\n  //\r\n  // For example, using `innerHTML` instead of `$el.html`\r\n  //\r\n  // ```js\r\n  // attachElContent(html) {\r\n  //   this.el.innerHTML = html;\r\n  //   return this;\r\n  // }\r\n  // ```\r\n  attachElContent(html) {\r\n    this.setInnerContent(this.el, html);\r\n\r\n    return this;\r\n  },\r\n\r\n  // called by ViewMixin destroy\r\n  _removeChildren() {\r\n    this.removeRegions();\r\n  },\r\n\r\n  _getImmediateChildren() {\r\n    return _.chain(this.getRegions())\r\n      .map('currentView')\r\n      .compact()\r\n      .value();\r\n  }\r\n});\r\n\r\n_.extend(View.prototype, ViewMixin, RegionsMixin);\r\n\r\nexport default View;\r\n","// Mix in methods from Underscore, for iteration, and other\r\n// collection related features.\r\n// Borrowing this code from Backbone.Collection:\r\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\r\n\r\nimport _ from 'underscore';\r\n\r\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\r\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\r\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\r\n                'last', 'without', 'isEmpty', 'pluck', 'reduce'];\r\n\r\nconst emulateCollection = function(object, listProperty) {\r\n  _.each(methods, function(method) {\r\n    object[method] = function() {\r\n      const list = _.values(_.result(this, listProperty));\r\n      const args = [list].concat(_.toArray(arguments));\r\n      return _[method].apply(_, args);\r\n    };\r\n  });\r\n};\r\n\r\nexport default emulateCollection;\r\n","import _ from 'underscore';\r\nimport emulateCollection from './utils/emulate-collection';\r\n\r\n// Provide a container to store, retrieve and\r\n// shut down child views.\r\nconst Container = function(views) {\r\n  this._views = {};\r\n  this._indexByModel = {};\r\n  this._indexByCustom = {};\r\n  this._updateLength();\r\n\r\n  _.each(views, _.bind(this.add, this));\r\n};\r\n\r\nemulateCollection(Container.prototype, '_views');\r\n\r\n// Container Methods\r\n// -----------------\r\n\r\n_.extend(Container.prototype, {\r\n\r\n  // Add a view to this container. Stores the view\r\n  // by `cid` and makes it searchable by the model\r\n  // cid (and model itself). Optionally specify\r\n  // a custom key to store an retrieve the view.\r\n  add(view, customIndex) {\r\n    return this._add(view, customIndex)._updateLength();\r\n  },\r\n\r\n  // To be used when avoiding call _updateLength\r\n  // When you are done adding all your new views\r\n  // call _updateLength\r\n  _add(view, customIndex) {\r\n    const viewCid = view.cid;\r\n\r\n    // store the view\r\n    this._views[viewCid] = view;\r\n\r\n    // index it by model\r\n    if (view.model) {\r\n      this._indexByModel[view.model.cid] = viewCid;\r\n    }\r\n\r\n    // index by custom\r\n    if (customIndex) {\r\n      this._indexByCustom[customIndex] = viewCid;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Find a view by the model that was attached to\r\n  // it. Uses the model's `cid` to find it.\r\n  findByModel(model) {\r\n    return this.findByModelCid(model.cid);\r\n  },\r\n\r\n  // Find a view by the `cid` of the model that was attached to\r\n  // it. Uses the model's `cid` to find the view `cid` and\r\n  // retrieve the view using it.\r\n  findByModelCid(modelCid) {\r\n    const viewCid = this._indexByModel[modelCid];\r\n    return this.findByCid(viewCid);\r\n  },\r\n\r\n  // Find a view by a custom indexer.\r\n  findByCustom(index) {\r\n    const viewCid = this._indexByCustom[index];\r\n    return this.findByCid(viewCid);\r\n  },\r\n\r\n  // Find by index. This is not guaranteed to be a\r\n  // stable index.\r\n  findByIndex(index) {\r\n    return _.values(this._views)[index];\r\n  },\r\n\r\n  // retrieve a view by its `cid` directly\r\n  findByCid(cid) {\r\n    return this._views[cid];\r\n  },\r\n\r\n  // Remove a view\r\n  remove(view) {\r\n    return this._remove(view)._updateLength();\r\n  },\r\n\r\n  // To be used when avoiding call _updateLength\r\n  // When you are done adding all your new views\r\n  // call _updateLength\r\n  _remove(view) {\r\n    const viewCid = view.cid;\r\n\r\n    // delete model index\r\n    if (view.model) {\r\n      delete this._indexByModel[view.model.cid];\r\n    }\r\n\r\n    // delete custom index\r\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\r\n      if (cid === viewCid) {\r\n        delete this._indexByCustom[key];\r\n        return true;\r\n      }\r\n    }, this));\r\n\r\n    // remove the view from the container\r\n    delete this._views[viewCid];\r\n\r\n    return this;\r\n  },\r\n\r\n  // Update the `.length` attribute on this container\r\n  _updateLength() {\r\n    this.length = _.size(this._views);\r\n\r\n    return this;\r\n  }\r\n});\r\n\r\nexport default Container;\r\n","// Collection View\r\n// ---------------\r\n\r\nimport _ from 'underscore';\r\nimport Backbone from 'backbone';\r\nimport destroyBackboneView from './utils/destroy-backbone-view';\r\nimport isNodeAttached from './common/is-node-attached';\r\nimport monitorViewEvents from './common/monitor-view-events';\r\nimport { triggerMethodOn } from './common/trigger-method';\r\nimport ChildViewContainer from './child-view-container';\r\nimport MarionetteError from './error';\r\nimport ViewMixin from './mixins/view';\r\n\r\nconst ClassOptions = [\r\n  'behaviors',\r\n  'childView',\r\n  'childViewEventPrefix',\r\n  'childViewEvents',\r\n  'childViewOptions',\r\n  'childViewTriggers',\r\n  'collectionEvents',\r\n  'events',\r\n  'filter',\r\n  'emptyView',\r\n  'emptyViewOptions',\r\n  'modelEvents',\r\n  'reorderOnSort',\r\n  'sort',\r\n  'triggers',\r\n  'ui',\r\n  'viewComparator'\r\n];\r\n\r\n// A view that iterates over a Backbone.Collection\r\n// and renders an individual child view for each model.\r\nconst CollectionView = Backbone.View.extend({\r\n\r\n  // flag for maintaining the sorted order of the collection\r\n  sort: true,\r\n\r\n  // constructor\r\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\r\n  // maintaining the sorted order of the collection.\r\n  // This will fallback onto appending childView's to the end.\r\n  //\r\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\r\n  // to use a custom sort order for the collection.\r\n  constructor(options) {\r\n    this.render = _.bind(this.render, this);\r\n\r\n    this._setOptions(options);\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    monitorViewEvents(this);\r\n\r\n    this._initBehaviors();\r\n    this.once('render', this._initialEvents);\r\n    this._initChildViewStorage();\r\n    this._bufferedChildren = [];\r\n\r\n    const args = Array.prototype.slice.call(arguments);\r\n    args[0] = this.options;\r\n    Backbone.View.prototype.constructor.apply(this, args);\r\n\r\n    this.delegateEntityEvents();\r\n  },\r\n\r\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\r\n  // elements into a document fragment and then insert that document fragment into the page\r\n  _startBuffering() {\r\n    this._isBuffering = true;\r\n  },\r\n\r\n  _endBuffering() {\r\n    const shouldTriggerAttach = !!this._isAttached;\r\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\r\n\r\n    this._isBuffering = false;\r\n\r\n    _.each(triggerOnChildren, child => {\r\n      triggerMethodOn(child, 'before:attach', child);\r\n    });\r\n\r\n    this.attachBuffer(this, this._createBuffer());\r\n\r\n    _.each(triggerOnChildren, child => {\r\n      child._isAttached = true;\r\n      triggerMethodOn(child, 'attach', child);\r\n    });\r\n\r\n    this._bufferedChildren = [];\r\n  },\r\n\r\n  _getImmediateChildren() {\r\n    return _.values(this.children._views);\r\n  },\r\n\r\n  // Configured the initial events that the collection view binds to.\r\n  _initialEvents() {\r\n    if (this.collection) {\r\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\r\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\r\n      this.listenTo(this.collection, 'reset', this.render);\r\n\r\n      if (this.sort) {\r\n        this.listenTo(this.collection, 'sort', this._sortViews);\r\n      }\r\n    }\r\n  },\r\n\r\n  // Handle a child added to the collection\r\n  _onCollectionAdd(child, collection, opts) {\r\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\r\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\r\n\r\n    // When filtered or when there is no initial index, calculate index.\r\n    if (this.filter || index === false) {\r\n      index = _.indexOf(this._filteredSortedModels(index), child);\r\n    }\r\n\r\n    if (this._shouldAddChild(child, index)) {\r\n      this._destroyEmptyView();\r\n      this._addChild(child, index)\r\n    }\r\n  },\r\n\r\n  // Handle collection update model removals\r\n  _onCollectionUpdate(collection, options) {\r\n    const changes = options.changes;\r\n    this._removeChildModels(changes.removed);\r\n  },\r\n\r\n  // Remove the child views and destroy them.\r\n  // This function also updates the indices of later views\r\n  // in the collection in order to keep the children in sync with the collection.\r\n  // \"models\" is an array of models and the corresponding views\r\n  // will be removed and destroyed from the CollectionView\r\n  _removeChildModels(models) {\r\n    // Used to determine where to update the remaining\r\n    // sibling view indices after these views are removed.\r\n    const removedViews = this._getRemovedViews(models);\r\n\r\n    if (!removedViews.length) {\r\n      return;\r\n    }\r\n\r\n    this.children._updateLength();\r\n\r\n    // decrement the index of views after this one\r\n    this._updateIndices(removedViews, false);\r\n\r\n    if (this.isEmpty()) {\r\n      this._showEmptyView();\r\n    }\r\n  },\r\n\r\n  // Returns the views that will be used for re-indexing\r\n  // through CollectionView#_updateIndices.\r\n  _getRemovedViews(models) {\r\n\r\n    // Returning a view means something was removed.\r\n    return _.reduce(models, (removingViews, model) => {\r\n      const view = model && this.children.findByModel(model);\r\n\r\n      if (!view || view._isDestroyed) {\r\n        return removingViews;\r\n      }\r\n\r\n      this._removeChildView(view);\r\n\r\n      removingViews.push(view);\r\n\r\n      return removingViews;\r\n    }, []);\r\n  },\r\n\r\n  _removeChildView(view) {\r\n    this.triggerMethod('before:remove:child', this, view);\r\n\r\n    this.children._remove(view);\r\n    if (view.destroy) {\r\n      view.destroy();\r\n    } else {\r\n      destroyBackboneView(view);\r\n    }\r\n\r\n    this.stopListening(view);\r\n    this.triggerMethod('remove:child', this, view);\r\n  },\r\n\r\n  // Overriding Backbone.View's `setElement` to handle\r\n  // if an el was previously defined. If so, the view might be\r\n  // attached on setElement.\r\n  setElement() {\r\n    const hasEl = !!this.el;\r\n\r\n    Backbone.View.prototype.setElement.apply(this, arguments);\r\n\r\n    if (hasEl) {\r\n      this._isAttached = isNodeAttached(this.el);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Render children views. Override this method to provide your own implementation of a\r\n  // render function for the collection view.\r\n  render() {\r\n    if (this._isDestroyed) { return this; }\r\n    this.triggerMethod('before:render', this);\r\n    this._renderChildren();\r\n    this._isRendered = true;\r\n    this.triggerMethod('render', this);\r\n    return this;\r\n  },\r\n\r\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\r\n  // collection view, we are only adding or removing the related childrenViews.\r\n  setFilter(filter, {preventRender} = {}) {\r\n    const canBeRendered = this._isRendered && !this._isDestroyed;\r\n    const filterChanged = this.filter !== filter;\r\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\r\n\r\n    if (shouldRender) {\r\n      const previousModels = this._filteredSortedModels();\r\n      this.filter = filter;\r\n      const models = this._filteredSortedModels();\r\n      this._applyModelDeltas(models, previousModels);\r\n    } else {\r\n      this.filter = filter;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // `removeFilter` is actually an alias for removing filters.\r\n  removeFilter(options) {\r\n    return this.setFilter(null, options);\r\n  },\r\n\r\n  // Calculate and apply difference by cid between `models` and `previousModels`.\r\n  _applyModelDeltas(models, previousModels) {\r\n    const currentIds = {};\r\n    _.each(models, (model, index) => {\r\n      const addedChildNotExists = !this.children.findByModel(model);\r\n      if (addedChildNotExists) {\r\n        this._onCollectionAdd(model, this.collection, {at: index});\r\n      }\r\n      currentIds[model.cid] = true;\r\n    });\r\n\r\n    const removeModels = _.filter(previousModels, (prevModel) => {\r\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\r\n    });\r\n\r\n    this._removeChildModels(removeModels);\r\n  },\r\n\r\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\r\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\r\n  // rendering all the collectionView.\r\n  reorder() {\r\n    const children = this.children;\r\n    const models = this._filteredSortedModels();\r\n\r\n    if (!models.length && this._showingEmptyView) { return this; }\r\n\r\n    const anyModelsAdded = _.some(models, function(model) {\r\n      return !children.findByModel(model);\r\n    });\r\n\r\n    // If there are any new models added due to filtering we need to add child views,\r\n    // so render as normal.\r\n    if (anyModelsAdded) {\r\n      this.render();\r\n    } else {\r\n\r\n      const filteredOutModels = [];\r\n\r\n      // Get the DOM nodes in the same order as the models and\r\n      // find the model that were children before but aren't in this new order.\r\n      const elsToReorder = children.reduce(function(viewEls, view) {\r\n        const index = _.indexOf(models, view.model);\r\n\r\n        if (index === -1) {\r\n          filteredOutModels.push(view.model);\r\n          return viewEls;\r\n        }\r\n\r\n        view._index = index;\r\n\r\n        viewEls[index] = view.el;\r\n\r\n        return viewEls;\r\n      }, new Array(models.length));\r\n\r\n      this.triggerMethod('before:reorder', this);\r\n\r\n      // Since append moves elements that are already in the DOM, appending the elements\r\n      // will effectively reorder them.\r\n      this._appendReorderedChildren(elsToReorder);\r\n\r\n      // remove any views that have been filtered out\r\n      this._removeChildModels(filteredOutModels);\r\n\r\n      this.triggerMethod('reorder', this);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Render view after sorting. Override this method to change how the view renders\r\n  // after a `sort` on the collection.\r\n  resortView() {\r\n    if (this.reorderOnSort) {\r\n      this.reorder();\r\n    } else {\r\n      this._renderChildren();\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Internal method. This checks for any changes in the order of the collection.\r\n  // If the index of any view doesn't match, it will render.\r\n  _sortViews() {\r\n    const models = this._filteredSortedModels();\r\n\r\n    // check for any changes in sort order of views\r\n    const orderChanged = _.find(models, (item, index) => {\r\n      const view = this.children.findByModel(item);\r\n      return !view || view._index !== index;\r\n    });\r\n\r\n    if (orderChanged) {\r\n      this.resortView();\r\n    }\r\n  },\r\n\r\n  // Internal reference to what index a `emptyView` is.\r\n  _emptyViewIndex: -1,\r\n\r\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\r\n  // if necessary\r\n  _appendReorderedChildren(children) {\r\n    this.appendChildren(this.el, children);\r\n  },\r\n\r\n  // Internal method. Separated so that CompositeView can have more control over events\r\n  // being triggered, around the rendering process\r\n  _renderChildren() {\r\n    if (this._isRendered) {\r\n      this._destroyEmptyView();\r\n      this._destroyChildren();\r\n    }\r\n\r\n    const models = this._filteredSortedModels();\r\n    if (this.isEmpty({processedModels: models})) {\r\n      this._showEmptyView();\r\n    } else {\r\n      this.triggerMethod('before:render:children', this);\r\n      this._startBuffering();\r\n      this._showCollection(models);\r\n      this._endBuffering();\r\n      this.triggerMethod('render:children', this);\r\n    }\r\n  },\r\n\r\n  _createView(model, index) {\r\n    const ChildView = this._getChildView(model);\r\n    const childViewOptions = this._getChildViewOptions(model, index);\r\n    const view = this.buildChildView(model, ChildView, childViewOptions);\r\n    return view;\r\n  },\r\n\r\n  _setupChildView(view, index) {\r\n    monitorViewEvents(view);\r\n\r\n    // set up the child view event forwarding\r\n    this._proxyChildViewEvents(view);\r\n\r\n    if (this.sort) {\r\n      view._index = index;\r\n    }\r\n  },\r\n\r\n  // Internal method to loop through collection and show each child view.\r\n  _showCollection(models) {\r\n    _.each(models, _.bind(this._addChild, this));\r\n    this.children._updateLength();\r\n  },\r\n\r\n  // Allow the collection to be sorted by a custom view comparator\r\n  _filteredSortedModels(addedAt) {\r\n    if (!this.collection || !this.collection.length) { return []; }\r\n\r\n    const viewComparator = this.getViewComparator();\r\n    let models = this.collection.models;\r\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\r\n\r\n    if (viewComparator) {\r\n      let addedModel;\r\n      // Preserve `at` location, even for a sorted view\r\n      if (addedAt) {\r\n        addedModel = models[addedAt];\r\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\r\n      }\r\n      models = this._sortModelsBy(models, viewComparator);\r\n      if (addedModel) {\r\n        models.splice(addedAt, 0, addedModel);\r\n      }\r\n    }\r\n\r\n    // Filter after sorting in case the filter uses the index\r\n    models = this._filterModels(models);\r\n\r\n    return models;\r\n  },\r\n\r\n  getViewComparator() {\r\n    return this.viewComparator;\r\n  },\r\n\r\n  // Filter an array of models, if a filter exists\r\n  _filterModels(models) {\r\n    if (this.filter) {\r\n      models = _.filter(models, (model, index) => {\r\n        return this._shouldAddChild(model, index);\r\n      });\r\n    }\r\n    return models;\r\n  },\r\n\r\n  _sortModelsBy(models, comparator) {\r\n    if (typeof comparator === 'string') {\r\n      return _.sortBy(models, (model) => {\r\n        return model.get(comparator);\r\n      });\r\n    } else if (comparator.length === 1) {\r\n      return _.sortBy(models, _.bind(comparator, this));\r\n    } else {\r\n      return _.clone(models).sort(_.bind(comparator, this));\r\n    }\r\n  },\r\n\r\n  // Internal method to show an empty view in place of a collection of child views,\r\n  // when the collection is empty\r\n  _showEmptyView() {\r\n    const EmptyView = this._getEmptyView();\r\n\r\n    if (EmptyView && !this._showingEmptyView) {\r\n      this._showingEmptyView = true;\r\n\r\n      const model = new Backbone.Model();\r\n      let emptyViewOptions =\r\n        this.emptyViewOptions || this.childViewOptions;\r\n      if (_.isFunction(emptyViewOptions)) {\r\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\r\n      }\r\n\r\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\r\n\r\n      this.triggerMethod('before:render:empty', this, view);\r\n      this.addChildView(view, 0);\r\n      this.triggerMethod('render:empty', this, view);\r\n    }\r\n  },\r\n\r\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\r\n  // a collection view has been rendered empty, and then a child is added to the collection.\r\n  _destroyEmptyView() {\r\n    if (this._showingEmptyView) {\r\n      this.triggerMethod('before:remove:empty', this);\r\n\r\n      this._destroyChildren();\r\n      delete this._showingEmptyView;\r\n\r\n      this.triggerMethod('remove:empty', this);\r\n    }\r\n  },\r\n\r\n  // Retrieve the empty view class\r\n  _getEmptyView() {\r\n    const emptyView = this.emptyView;\r\n\r\n    if (!emptyView) { return; }\r\n\r\n    return this._getView(emptyView);\r\n  },\r\n\r\n  // Retrieve the `childView` class\r\n  // The `childView` property can be either a view class or a function that\r\n  // returns a view class. If it is a function, it will receive the model that\r\n  // will be passed to the view instance (created from the returned view class)\r\n  _getChildView(child) {\r\n    let childView = this.childView;\r\n\r\n    if (!childView) {\r\n      throw new MarionetteError({\r\n        name: 'NoChildViewError',\r\n        message: 'A \"childView\" must be specified'\r\n      });\r\n    }\r\n\r\n    childView = this._getView(childView, child);\r\n\r\n    if (!childView) {\r\n      throw new MarionetteError({\r\n        name: 'InvalidChildViewError',\r\n        message: '\"childView\" must be a view class or a function that returns a view class'\r\n      });\r\n    }\r\n\r\n    return childView;\r\n  },\r\n\r\n  // First check if the `view` is a view class (the common case)\r\n  // Then check if it's a function (which we assume that returns a view class)\r\n  _getView(view, child) {\r\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\r\n      return view;\r\n    } else if (_.isFunction(view)) {\r\n      return view.call(this, child);\r\n    }\r\n  },\r\n\r\n  // Internal method for building and adding a child view\r\n  _addChild(child, index) {\r\n    const view = this._createView(child, index);\r\n    this.addChildView(view, index);\r\n\r\n    return view;\r\n  },\r\n\r\n  _getChildViewOptions(child, index) {\r\n    if (_.isFunction(this.childViewOptions)) {\r\n      return this.childViewOptions(child, index);\r\n    }\r\n\r\n    return this.childViewOptions;\r\n  },\r\n\r\n  // Render the child's view and add it to the HTML for the collection view at a given index.\r\n  // This will also update the indices of later views in the collection in order to keep the\r\n  // children in sync with the collection.\r\n  addChildView(view, index) {\r\n    this.triggerMethod('before:add:child', this, view);\r\n    this._setupChildView(view, index);\r\n\r\n    // Store the child view itself so we can properly remove and/or destroy it later\r\n    if (this._isBuffering) {\r\n      // Add to children, but don't update children's length.\r\n      this.children._add(view);\r\n    } else {\r\n      // increment indices of views after this one\r\n      this._updateIndices(view, true);\r\n      this.children.add(view);\r\n    }\r\n\r\n    this._renderView(view);\r\n\r\n    this._attachView(view, index);\r\n\r\n    this.triggerMethod('add:child', this, view);\r\n\r\n    return view;\r\n  },\r\n\r\n  // Internal method. This decrements or increments the indices of views after the added/removed\r\n  // view to keep in sync with the collection.\r\n  _updateIndices(views, increment) {\r\n    if (!this.sort) {\r\n      return;\r\n    }\r\n\r\n    if (!increment) {\r\n      _.each(_.sortBy(this.children._views, '_index'), (view, index) => {\r\n        view._index = index;\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const view = _.isArray(views) ? _.max(views, '_index') : views;\r\n\r\n    if (_.isObject(view)) {\r\n      // update the indexes of views after this one\r\n      this.children.each((laterView) => {\r\n        if (laterView._index >= view._index) {\r\n          laterView._index += 1;\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  _renderView(view) {\r\n    if (view._isRendered) {\r\n      return;\r\n    }\r\n\r\n    if (!view.supportsRenderLifecycle) {\r\n      triggerMethodOn(view, 'before:render', view);\r\n    }\r\n\r\n    view.render();\r\n\r\n    if (!view.supportsRenderLifecycle) {\r\n      view._isRendered = true;\r\n      triggerMethodOn(view, 'render', view);\r\n    }\r\n  },\r\n\r\n  _attachView(view, index) {\r\n    // Only trigger attach if already attached and not buffering,\r\n    // otherwise _endBuffering() or Region#show() handles this.\r\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached;\r\n\r\n    if (shouldTriggerAttach) {\r\n      triggerMethodOn(view, 'before:attach', view);\r\n    }\r\n\r\n    this.attachHtml(this, view, index);\r\n\r\n    if (shouldTriggerAttach) {\r\n      view._isAttached = true;\r\n      triggerMethodOn(view, 'attach', view);\r\n    }\r\n  },\r\n\r\n  // Build a `childView` for a model in the collection.\r\n  buildChildView(child, ChildViewClass, childViewOptions) {\r\n    const options = _.extend({model: child}, childViewOptions);\r\n    return new ChildViewClass(options);\r\n  },\r\n\r\n  // Remove the child view and destroy it. This function also updates the indices of later views\r\n  // in the collection in order to keep the children in sync with the collection.\r\n  removeChildView(view) {\r\n    if (!view || view._isDestroyed) {\r\n      return view;\r\n    }\r\n\r\n    this._removeChildView(view);\r\n    this.children._updateLength();\r\n    // decrement the index of views after this one\r\n    this._updateIndices(view, false);\r\n    return view;\r\n  },\r\n\r\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\r\n  isEmpty(options) {\r\n    let models;\r\n    if (_.result(options, 'processedModels')) {\r\n      models = options.processedModels;\r\n    } else {\r\n      models = this.collection ? this.collection.models : [];\r\n      models = this._filterModels(models);\r\n    }\r\n    return models.length === 0;\r\n  },\r\n\r\n  // You might need to override this if you've overridden attachHtml\r\n  attachBuffer(collectionView, buffer) {\r\n    this.appendChildren(collectionView.el, buffer);\r\n  },\r\n\r\n  // Create a fragment buffer from the currently buffered children\r\n  _createBuffer() {\r\n    const elBuffer = this.createBuffer();\r\n    _.each(this._bufferedChildren, (b) => {\r\n      this.appendChildren(elBuffer, b.el);\r\n    });\r\n    return elBuffer;\r\n  },\r\n\r\n  // Append the HTML to the collection's `el`. Override this method to do something other\r\n  // than `.append`.\r\n  attachHtml(collectionView, childView, index) {\r\n    if (collectionView._isBuffering) {\r\n      // buffering happens on reset events and initial renders\r\n      // in order to reduce the number of inserts into the\r\n      // document, which are expensive.\r\n      collectionView._bufferedChildren.splice(index, 0, childView);\r\n    } else {\r\n      // If we've already rendered the main collection, append\r\n      // the new child into the correct order if we need to. Otherwise\r\n      // append to the end.\r\n      if (!collectionView._insertBefore(childView, index)) {\r\n        collectionView._insertAfter(childView);\r\n      }\r\n    }\r\n  },\r\n\r\n  // Internal method. Check whether we need to insert the view into the correct position.\r\n  _insertBefore(childView, index) {\r\n    let currentView;\r\n    const findPosition = this.sort && (index < this.children.length - 1);\r\n    if (findPosition) {\r\n      // Find the view after this one\r\n      currentView = this.children.find((view) => {\r\n        return view._index === index + 1;\r\n      });\r\n    }\r\n\r\n    if (currentView) {\r\n      this.beforeEl(currentView.el, childView.el);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  // Internal method. Append a view to the end of the $el\r\n  _insertAfter(childView) {\r\n    this.appendChildren(this.el, childView.el);\r\n  },\r\n\r\n  // Internal method to set up the `children` object for storing all of the child views\r\n  _initChildViewStorage() {\r\n    this.children = new ChildViewContainer();\r\n  },\r\n\r\n  // called by ViewMixin destroy\r\n  _removeChildren() {\r\n    this._destroyChildren();\r\n  },\r\n\r\n  // Destroy the child views that this collection view is holding on to, if any\r\n  _destroyChildren(options) {\r\n    if (!this.children.length) {\r\n      return;\r\n    }\r\n\r\n    this.triggerMethod('before:destroy:children', this);\r\n    this.children.each(_.bind(this._removeChildView, this));\r\n    this.children._updateLength();\r\n    this.triggerMethod('destroy:children', this);\r\n  },\r\n\r\n  // Return true if the given child should be shown. Return false otherwise.\r\n  // The filter will be passed (child, index, collection), where\r\n  //  'child' is the given model\r\n  //  'index' is the index of that model in the collection\r\n  //  'collection' is the collection referenced by this CollectionView\r\n  _shouldAddChild(child, index) {\r\n    const filter = this.filter;\r\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\r\n  }\r\n});\r\n\r\n_.extend(CollectionView.prototype, ViewMixin);\r\n\r\nexport default CollectionView;\r\n","// Composite View\r\n// --------------\r\n\r\nimport _ from 'underscore';\r\nimport deprecate from './utils/deprecate';\r\nimport MarionetteError from './error';\r\nimport CollectionView from './collection-view';\r\nimport View from './view';\r\n\r\nconst ClassOptions = [\r\n  'childViewContainer',\r\n  'template',\r\n  'templateContext'\r\n];\r\n\r\n// Used for rendering a branch-leaf, hierarchical structure.\r\n// Extends directly from CollectionView\r\n// @deprecated\r\nconst CompositeView = CollectionView.extend({\r\n\r\n  // Setting up the inheritance chain which allows changes to\r\n  // Marionette.CollectionView.prototype.constructor which allows overriding\r\n  // option to pass '{sort: false}' to prevent the CompositeView from\r\n  // maintaining the sorted order of the collection.\r\n  // This will fallback onto appending childView's to the end.\r\n  constructor(options) {\r\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    CollectionView.prototype.constructor.apply(this, arguments);\r\n  },\r\n\r\n  // Configured the initial events that the composite view\r\n  // binds to. Override this method to prevent the initial\r\n  // events, or to add your own initial events.\r\n  _initialEvents() {\r\n\r\n    // Bind only after composite view is rendered to avoid adding child views\r\n    // to nonexistent childViewContainer\r\n\r\n    if (this.collection) {\r\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\r\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\r\n      this.listenTo(this.collection, 'reset', this.renderChildren);\r\n\r\n      if (this.sort) {\r\n        this.listenTo(this.collection, 'sort', this._sortViews);\r\n      }\r\n    }\r\n  },\r\n\r\n  // Retrieve the `childView` to be used when rendering each of\r\n  // the items in the collection. The default is to return\r\n  // `this.childView` or Marionette.CompositeView if no `childView`\r\n  // has been defined. As happens in CollectionView, `childView` can\r\n  // be a function (which should return a view class).\r\n  _getChildView(child) {\r\n    let childView = this.childView;\r\n\r\n    // for CompositeView, if `childView` is not specified, we'll get the same\r\n    // composite view class rendered for each child in the collection\r\n    // then check if the `childView` is a view class (the common case)\r\n    // finally check if it's a function (which we assume that returns a view class)\r\n    if (!childView) {\r\n      return this.constructor;\r\n    }\r\n\r\n    childView = this._getView(childView, child);\r\n\r\n    if (!childView) {\r\n      throw new MarionetteError({\r\n        name: 'InvalidChildViewError',\r\n        message: '\"childView\" must be a view class or a function that returns a view class'\r\n      });\r\n    }\r\n\r\n    return childView;\r\n  },\r\n\r\n  // Return the serialized model\r\n  serializeData() {\r\n    return this.serializeModel();\r\n  },\r\n\r\n  // Renders the model and the collection.\r\n  render() {\r\n    if (this._isDestroyed) { return this; }\r\n    this._isRendering = true;\r\n    this.resetChildViewContainer();\r\n\r\n    this.triggerMethod('before:render', this);\r\n\r\n    this._renderTemplate();\r\n    this.bindUIElements();\r\n    this.renderChildren();\r\n\r\n    this._isRendering = false;\r\n    this._isRendered = true;\r\n    this.triggerMethod('render', this);\r\n    return this;\r\n  },\r\n\r\n  renderChildren() {\r\n    if (this._isRendered || this._isRendering) {\r\n      CollectionView.prototype._renderChildren.call(this);\r\n    }\r\n  },\r\n\r\n  // You might need to override this if you've overridden attachHtml\r\n  attachBuffer(compositeView, buffer) {\r\n    const $container = this.getChildViewContainer(compositeView);\r\n    this.appendChildren($container, buffer);\r\n  },\r\n\r\n  // Internal method. Append a view to the end of the $el.\r\n  // Overidden from CollectionView to ensure view is appended to\r\n  // childViewContainer\r\n  _insertAfter(childView) {\r\n    const $container = this.getChildViewContainer(this, childView);\r\n    this.appendChildren($container, childView.el);\r\n  },\r\n\r\n  // Internal method. Append reordered childView'.\r\n  // Overidden from CollectionView to ensure reordered views\r\n  // are appended to childViewContainer\r\n  _appendReorderedChildren(children) {\r\n    const $container = this.getChildViewContainer(this);\r\n    this.appendChildren($container, children);\r\n  },\r\n\r\n  // Internal method to ensure an `$childViewContainer` exists, for the\r\n  // `attachHtml` method to use.\r\n  getChildViewContainer(containerView, childView) {\r\n    if (!!containerView.$childViewContainer) {\r\n      return containerView.$childViewContainer;\r\n    }\r\n\r\n    let container;\r\n    const childViewContainer = containerView.childViewContainer;\r\n    if (childViewContainer) {\r\n\r\n      const selector = _.result(containerView, 'childViewContainer');\r\n\r\n      if (selector.charAt(0) === '@' && containerView.ui) {\r\n        container = containerView.ui[selector.substr(4)];\r\n      } else {\r\n        container = this.findEls(selector, containerView.$el);\r\n      }\r\n\r\n      if (container.length <= 0) {\r\n        throw new MarionetteError({\r\n          name: 'ChildViewContainerMissingError',\r\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\r\n        });\r\n      }\r\n\r\n    } else {\r\n      container = containerView.$el;\r\n    }\r\n\r\n    containerView.$childViewContainer = container;\r\n    return container;\r\n  },\r\n\r\n  // Internal method to reset the `$childViewContainer` on render\r\n  resetChildViewContainer() {\r\n    if (this.$childViewContainer) {\r\n      this.$childViewContainer = undefined;\r\n    }\r\n  }\r\n});\r\n\r\n// To prevent duplication but allow the best View organization\r\n// Certain View methods are mixed directly into the deprecated CompositeView\r\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'mixinTemplateContext', 'attachElContent');\r\n_.extend(CompositeView.prototype, MixinFromView);\r\n\r\nexport default CompositeView;\r\n","// Behavior\r\n// --------\r\n\r\n// A Behavior is an isolated set of DOM /\r\n// user interactions that can be mixed into any View.\r\n// Behaviors allow you to blackbox View specific interactions\r\n// into portable logical chunks, keeping your views simple and your code DRY.\r\n\r\nimport _ from 'underscore';\r\nimport getUniqueEventName from './utils/get-unique-event-name';\r\nimport MarionetteObject from './object';\r\nimport DelegateEntityEventsMixin from './mixins/delegate-entity-events';\r\nimport TriggersMixin from './mixins/triggers';\r\nimport UIMixin from './mixins/ui';\r\n\r\nconst ClassOptions = [\r\n  'collectionEvents',\r\n  'events',\r\n  'modelEvents',\r\n  'triggers',\r\n  'ui'\r\n];\r\n\r\nconst Behavior = MarionetteObject.extend({\r\n  cidPrefix: 'mnb',\r\n\r\n  constructor(options, view) {\r\n    // Setup reference to the view.\r\n    // this comes in handle when a behavior\r\n    // wants to directly talk up the chain\r\n    // to the view.\r\n    this.view = view;\r\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\r\n    this._setOptions(this.defaults, options);\r\n    this.mergeOptions(this.options, ClassOptions);\r\n\r\n    // Construct an internal UI hash using\r\n    // the behaviors UI hash and then the view UI hash.\r\n    // This allows the user to use UI hash elements\r\n    // defined in the parent view as well as those\r\n    // defined in the given behavior.\r\n    // This order will help the reuse and share of a behavior\r\n    // between multiple views, while letting a view override a\r\n    // selector under an UI key.\r\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\r\n\r\n    MarionetteObject.apply(this, arguments);\r\n  },\r\n\r\n  // proxy behavior $ method to the view\r\n  // this is useful for doing jquery DOM lookups\r\n  // scoped to behaviors view.\r\n  $() {\r\n    return this.view.$.apply(this.view, arguments);\r\n  },\r\n\r\n  // Stops the behavior from listening to events.\r\n  // Overrides Object#destroy to prevent additional events from being triggered.\r\n  destroy() {\r\n    this.stopListening();\r\n\r\n    return this;\r\n  },\r\n\r\n  proxyViewProperties() {\r\n    this.$el = this.view.$el;\r\n    this.el = this.view.el;\r\n\r\n    return this;\r\n  },\r\n\r\n  bindUIElements() {\r\n    this._bindUIElements();\r\n\r\n    return this;\r\n  },\r\n\r\n  unbindUIElements() {\r\n    this._unbindUIElements();\r\n\r\n    return this;\r\n  },\r\n\r\n  getUI(name) {\r\n    return this._getUI(name);\r\n  },\r\n\r\n  // Handle `modelEvents`, and `collectionEvents` configuration\r\n  delegateEntityEvents() {\r\n    this._delegateEntityEvents(this.view.model, this.view.collection);\r\n\r\n    return this;\r\n  },\r\n\r\n  undelegateEntityEvents() {\r\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\r\n\r\n    return this;\r\n  },\r\n\r\n  getEvents() {\r\n    // Normalize behavior events hash to allow\r\n    // a user to use the @ui. syntax.\r\n    const behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\r\n\r\n    // binds the handler to the behavior and builds a unique eventName\r\n    return _.reduce(behaviorEvents, (events, behaviorHandler, key) => {\r\n      if (!_.isFunction(behaviorHandler)) {\r\n        behaviorHandler = this[behaviorHandler];\r\n      }\r\n      if (!behaviorHandler) { return; }\r\n      key = getUniqueEventName(key);\r\n      events[key] = _.bind(behaviorHandler, this);\r\n      return events;\r\n    }, {});\r\n  },\r\n\r\n  // Internal method to build all trigger handlers for a given behavior\r\n  getTriggers() {\r\n    if (!this.triggers) { return; }\r\n\r\n    // Normalize behavior triggers hash to allow\r\n    // a user to use the @ui. syntax.\r\n    const behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\r\n\r\n    return this._getViewTriggers(this.view, behaviorTriggers);\r\n  }\r\n\r\n});\r\n\r\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\r\n\r\nexport default Behavior;\r\n","// Application\r\n// -----------\r\nimport buildRegion from './common/build-region';\r\nimport MarionetteObject from './object';\r\nimport Region from './region';\r\n\r\nconst ClassOptions = [\r\n  'region',\r\n  'regionClass'\r\n];\r\n\r\n// A container for a Marionette application.\r\nconst Application = MarionetteObject.extend({\r\n  cidPrefix: 'mna',\r\n\r\n  constructor(options) {\r\n    this._setOptions(options);\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    this._initRegion();\r\n\r\n    MarionetteObject.prototype.constructor.apply(this, arguments);\r\n  },\r\n\r\n  regionClass: Region,\r\n\r\n  _initRegion() {\r\n    const region = this.region;\r\n\r\n    if (!region) { return; }\r\n\r\n    const defaults = {\r\n      regionClass: this.regionClass\r\n    };\r\n\r\n    this._region = buildRegion(region, defaults);\r\n  },\r\n\r\n  getRegion() {\r\n    return this._region;\r\n  },\r\n\r\n  showView(view, ...args) {\r\n    const region = this.getRegion();\r\n    return region.show(view, ...args);\r\n  },\r\n\r\n  getView() {\r\n    return this.getRegion().currentView;\r\n  },\r\n\r\n  // kick off all of the application's processes.\r\n  start(options) {\r\n    this.triggerMethod('before:start', this, options);\r\n    this.triggerMethod('start', this, options);\r\n    return this;\r\n  }\r\n\r\n});\r\n\r\nexport default Application;\r\n","// App Router\r\n// ----------\r\n\r\n// Reduce the boilerplate code of handling route events\r\n// and then calling a single method on another object,\r\n// called a controller.\r\n// Have your routers configured to call the method on\r\n// your controller, directly.\r\n//\r\n// Configure an AppRouter with `appRoutes`.\r\n//\r\n// App routers can only take one `controller` object.\r\n// It is recommended that you divide your controller\r\n// objects in to smaller pieces of related functionality\r\n// and have multiple routers / controllers, instead of\r\n// just one giant router and controller.\r\n//\r\n// You can also add standard routes to an AppRouter.\r\n\r\nimport Backbone from 'backbone';\r\nimport _ from 'underscore';\r\nimport { triggerMethod } from './common/trigger-method';\r\nimport MarionetteError from './error';\r\nimport CommonMixin from './mixins/common';\r\n\r\nconst ClassOptions = [\r\n  'appRoutes',\r\n  'controller'\r\n];\r\n\r\nconst AppRouter = Backbone.Router.extend({\r\n\r\n  constructor(options) {\r\n    this._setOptions(options);\r\n\r\n    this.mergeOptions(options, ClassOptions);\r\n\r\n    Backbone.Router.apply(this, arguments);\r\n\r\n    const appRoutes = this.appRoutes;\r\n    const controller = this._getController();\r\n    this.processAppRoutes(controller, appRoutes);\r\n    this.on('route', this._processOnRoute, this);\r\n  },\r\n\r\n  // Similar to route method on a Backbone Router but\r\n  // method is called on the controller\r\n  appRoute(route, methodName) {\r\n    const controller = this._getController();\r\n    this._addAppRoute(controller, route, methodName);\r\n    return this;\r\n  },\r\n\r\n  // process the route event and trigger the onRoute\r\n  // method call, if it exists\r\n  _processOnRoute(routeName, routeArgs) {\r\n    // make sure an onRoute before trying to call it\r\n    if (_.isFunction(this.onRoute)) {\r\n      // find the path that matches the current route\r\n      const routePath = _.invert(this.appRoutes)[routeName];\r\n      this.onRoute(routeName, routePath, routeArgs);\r\n    }\r\n  },\r\n\r\n  // Internal method to process the `appRoutes` for the\r\n  // router, and turn them in to routes that trigger the\r\n  // specified method on the specified `controller`.\r\n  processAppRoutes(controller, appRoutes) {\r\n    if (!appRoutes) { return this; }\r\n\r\n    const routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\r\n\r\n    _.each(routeNames, route => {\r\n      this._addAppRoute(controller, route, appRoutes[route]);\r\n    });\r\n\r\n    return this;\r\n  },\r\n\r\n  _getController() {\r\n    return this.controller;\r\n  },\r\n\r\n  _addAppRoute(controller, route, methodName) {\r\n    const method = controller[methodName];\r\n\r\n    if (!method) {\r\n      throw new MarionetteError(`Method \"${methodName}\" was not found on the controller`);\r\n    }\r\n\r\n    this.route(route, methodName, _.bind(method, controller));\r\n  },\r\n\r\n  triggerMethod: triggerMethod\r\n});\r\n\r\n_.extend(AppRouter.prototype, CommonMixin);\r\n\r\nexport default AppRouter;\r\n","import Backbone from 'backbone';\r\nimport {version} from '../package.json';\r\n\r\nimport proxy from './utils/proxy';\r\nimport extend from './utils/extend';\r\nimport deprecate from './utils/deprecate';\r\n\r\nimport isNodeAttached from './common/is-node-attached';\r\nimport mergeOptions from './common/merge-options';\r\nimport getOption from './common/get-option';\r\nimport normalizeMethods from './common/normalize-methods';\r\nimport monitorViewEvents from './common/monitor-view-events';\r\n\r\nimport {\r\n  bindEvents,\r\n  unbindEvents\r\n} from './common/bind-events';\r\n\r\nimport {\r\n  bindRequests,\r\n  unbindRequests\r\n} from './common/bind-requests';\r\n\r\nimport {\r\n  triggerMethod,\r\n  triggerMethodOn\r\n} from './common/trigger-method';\r\n\r\n\r\nimport MarionetteObject from './object';\r\nimport TemplateCache from './template-cache';\r\nimport View from './view';\r\nimport CollectionView from './collection-view';\r\nimport CompositeView from './composite-view';\r\nimport Behavior from './behavior';\r\nimport Region from './region';\r\nimport Application from './application';\r\nimport AppRouter from './app-router';\r\nimport MarionetteError from './error';\r\n\r\nimport behaviorsLookup from './config/behaviors-lookup';\r\nimport Renderer from './config/renderer';\r\n\r\nimport {\r\n  FEATURES,\r\n  isEnabled,\r\n  setEnabled\r\n} from './config/features';\r\n\r\nconst previousMarionette = Backbone.Marionette;\r\nconst Marionette = Backbone.Marionette = {};\r\n\r\n// This allows you to run multiple instances of Marionette on the same\r\n// webapp. After loading the new version, call `noConflict()` to\r\n// get a reference to it. At the same time the old version will be\r\n// returned to Backbone.Marionette.\r\nMarionette.noConflict = function() {\r\n  Backbone.Marionette = previousMarionette;\r\n  return this;\r\n};\r\n\r\n// Utilities\r\nMarionette.bindEvents = proxy(bindEvents);\r\nMarionette.unbindEvents = proxy(unbindEvents);\r\nMarionette.bindRequests = proxy(bindRequests);\r\nMarionette.unbindRequests = proxy(unbindRequests);\r\nMarionette.mergeOptions = proxy(mergeOptions);\r\nMarionette.getOption = proxy(getOption);\r\nMarionette.normalizeMethods = proxy(normalizeMethods);\r\nMarionette.extend = extend;\r\nMarionette.isNodeAttached = isNodeAttached;\r\nMarionette.deprecate = deprecate;\r\nMarionette.triggerMethod = proxy(triggerMethod);\r\nMarionette.triggerMethodOn = triggerMethodOn;\r\nMarionette.isEnabled = isEnabled;\r\nMarionette.setEnabled = setEnabled;\r\nMarionette.monitorViewEvents = monitorViewEvents;\r\n\r\nMarionette.Behaviors = {};\r\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\r\n\r\n// Classes\r\nMarionette.Application = Application;\r\nMarionette.AppRouter = AppRouter;\r\nMarionette.Renderer = Renderer;\r\nMarionette.TemplateCache = TemplateCache;\r\nMarionette.View = View;\r\nMarionette.CollectionView = CollectionView;\r\nMarionette.CompositeView = CompositeView;\r\nMarionette.Behavior = Behavior;\r\nMarionette.Region = Region;\r\nMarionette.Error = MarionetteError;\r\nMarionette.Object = MarionetteObject;\r\n\r\n// Configuration\r\nMarionette.DEV_MODE = false;\r\nMarionette.FEATURES = FEATURES;\r\nMarionette.VERSION = version;\r\n\r\nexport default Marionette;\r\n"]}